//
//  SettingsPenUserPresenter.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AKUtils

protocol SettingsPenUserPresentationLogic {
    func presentUpdateData(response: SettingsPenUser.UpdateData.Response)
}

final class SettingsPenUserPresenter: SettingsPenUserPresentationLogic {
    weak var viewController: SettingsPenUserDisplayLogic?
    
    private var startOfDay: Date {
        return Calendar.current.startOfDay(for: Date())
    }
    
    private var scheduledTimes = [TimeInterval]()
    
    // MARK: Do something
    
    func presentUpdateData(response: SettingsPenUser.UpdateData.Response) {
        scheduledTimes = response.basalRates.map { $0.startTime }
        
        let tableViewModel = BaseSettings.ViewModel(
            sections: [
                createBasalRatesSection(response: response),
                createTotalsSection(response: response)
            ]
        )
        
        let viewModel = SettingsPenUser.UpdateData.ViewModel(
            animated: response.animated,
            tableViewModel: tableViewModel,
            addButtonEnabled: scheduledTimes.last <? BasalRate.lastValidStartTime
        )
        viewController?.displayUpdateData(viewModel: viewModel)
    }
    
    private func createBasalRatesSection(response: SettingsPenUser.UpdateData.Response) -> BaseSettings.Section {
        var cells = [BaseSettings.Cell]()
        
        for (index, rate) in response.basalRates.enumerated() {
            cells.append(
                createPickerCell(
                    for: rate,
                    index: index,
                    pickerValueChangeHandler: response.pickerValueChangedHandler
                )
            )
        }
        
        return .normal(
            cells: cells,
            header: "settings_pen_user_basal_rates_section_header".localized,
            footer: nil
        )
    }
    
    private func createTotalsSection(response: SettingsPenUser.UpdateData.Response) -> BaseSettings.Section {
        let totalValueString = String(
            format: "%.2f " + "settings_pen_user_u".localized,
            response.totalValue
        )
        
        let cells: [BaseSettings.Cell] = [
            .info(
                mainText: "settings_pen_user_total_daily".localized,
                detailText: totalValueString,
                detailTextColor: .tabBarBlueColor
            )
        ]
        
        return .normal(cells: cells, header: nil, footer: nil)
    }
    
    private func createPickerCell(
        for basalRate: BasalRate,
        index: Int,
        pickerValueChangeHandler: @escaping (Int, TimeInterval, Float) -> Void) -> BaseSettings.Cell {
        let startOfDay = Calendar.current.startOfDay(for: Date())
        let date = startOfDay.addingTimeInterval(basalRate.startTime)
        let formattedDate = DateFormatter.localizedString(from: date, dateStyle: .none, timeStyle: .short)
        
        let unitsString = String(
            format: " / %.2f " + "settings_pen_user_u".localized,
            basalRate.units
        )
        
        let detailText = formattedDate + unitsString
        
        let minInterval = BasalRate.minimumTimeIntervalBetweenRates
        var minStartTime = 0.0
        var maxStartTime = BasalRate.lastValidStartTime
        
        if index > 0 {
            minStartTime = scheduledTimes[index - 1] + minInterval
        }
        
        if index == 0 && scheduledTimes.count == 1 {
            maxStartTime = 0.0
        } else if index < scheduledTimes.endIndex - 1 {
            maxStartTime = scheduledTimes[index + 1] - minInterval
        }
        
        let picker = BasalRatesPicker()
        picker.minimumStartTime = minStartTime
        picker.maximumStartTime = maxStartTime
        picker.minimumTimeInterval = minInterval
        picker.startTime = basalRate.startTime
        picker.value = basalRate.units
        
        picker.handleChanges = { time, value in
            guard let value = Float(value) else { return }
            
            pickerValueChangeHandler(index, time, value)
        }
        
        return .pickerExpandable(
            mainText: "settings_pen_user_start_time_rate".localized,
            detailText: detailText,
            picker: picker
        )
    }
}
