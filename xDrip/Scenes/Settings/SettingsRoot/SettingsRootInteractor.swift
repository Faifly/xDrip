//
//  SettingsRootInteractor.swift
//  xDrip
//
//  Created by Artem Kalmykov on 11.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// swiftlint:disable cyclomatic_complexity

protocol SettingsRootBusinessLogic {
    func doLoad(request: SettingsRoot.Load.Request)
    func doCancel(request: SettingsRoot.Cancel.Request)
}

protocol SettingsRootDataStore: AnyObject {
}

final class SettingsRootInteractor: SettingsRootBusinessLogic, SettingsRootDataStore {
    var presenter: SettingsRootPresentationLogic?
    var router: SettingsRootRoutingLogic?
    
    // MARK: Do something
    
    func doLoad(request: SettingsRoot.Load.Request) {
        let user = User.current
        
        let response = SettingsRoot.Load.Response(
            deviceMode: user.settings.deviceMode,
            injectionType: user.settings.injectionType,
            selectionHandler: handleFieldSelection(_:),
            timePickerValueChangedHandler: handleTimePickerValueChanged(_:_:)
        )
        presenter?.presentLoad(response: response)
    }
    
    func doCancel(request: SettingsRoot.Cancel.Request) {
        router?.dismissSelf()
    }
    
    // MARK: Logic
    
    private func handleFieldSelection(_ field: SettingsRoot.Field) {
        switch field {
        case .units: router?.routeToUnits()
        case .chartSettings: router?.routeToChartSettings()
        case .alert: router?.routeToAlertRoot()
        case .cloudUpload: router?.routeToCloudUploads()
        case .transmitter: router?.routeToTransmitter()
        case .modeSettings: router?.routeToModeSettings()
        case .userType: router?.routeToUserType()
        case .rangeSelection: router?.routeToRangeSelection()
        case .sensor: router?.routeToSensor()
        case .nightscoutService: router?.routeToNightscoutService()
        default: break
        }
    }
    
    private func handleTimePickerValueChanged(_ field: SettingsRoot.Field, _ time: TimeInterval) {
        let settings = User.current.settings
        
        switch field {
        case .carbsDurationTime: settings?.updateCarbsAbsorptionRate(time)
        case .insulinDurationTime: settings?.updateInsulinActionTime(time)
        default: break
        }
    }
}
