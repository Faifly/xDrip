//
//  SettingsRootPresenter.swift
//  xDrip
//
//  Created by Artem Kalmykov on 11.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsRootPresentationLogic {
    func presentLoad(response: SettingsRoot.Load.Response)
}

final class SettingsRootPresenter: SettingsRootPresentationLogic {
    weak var viewController: SettingsRootDisplayLogic?
    
    // MARK: Do something
    
    func presentLoad(response: SettingsRoot.Load.Response) {
        var sections = [
            createApplicationSetupSection(response: response),
            createProfileSetupSection(response: response),
            createDebugSection(response: response)
        ]
        
        if response.injectionType == .pump {
            sections.append(
                createServicesSection(response: response)
            )
        }
        
        let tableViewModel = BaseSettings.ViewModel(sections: sections)
        
        let viewModel = SettingsRoot.Load.ViewModel(tableViewModel: tableViewModel)
        viewController?.displayLoad(viewModel: viewModel)
    }
    
    private func createApplicationSetupSection(response: SettingsRoot.Load.Response) -> BaseSettings.Section {
        var cells: [BaseSettings.Cell] = [
            createDisclosureCell(.chartSettings, detailText: nil, selectionHandler: response.selectionHandler),
            createDisclosureCell(.alert, detailText: nil, selectionHandler: response.selectionHandler),
            createDisclosureCell(.cloudUpload, detailText: nil, selectionHandler: response.selectionHandler),
            createDisclosureCell(
                .modeSettings,
                detailText: response.deviceMode.title,
                selectionHandler: response.selectionHandler
            )
        ]
        
        if response.deviceMode == .main {
            cells.append(
                contentsOf: [
                    createDisclosureCell(.sensor, detailText: nil, selectionHandler: response.selectionHandler),
                    createDisclosureCell(.transmitter, detailText: nil, selectionHandler: response.selectionHandler)
                ]
            )
        }
        
        return .normal(
            cells: cells,
            header: "settings_root_application_setup_header".localized,
            footer: nil
        )
    }
    
    private func createProfileSetupSection(response: SettingsRoot.Load.Response) -> BaseSettings.Section {
        let carbsDuration = User.current.settings.carbsAbsorptionRate
        let insulinDuration = User.current.settings.insulinActionTime
        
        let cells: [BaseSettings.Cell] = [
            createDisclosureCell(.rangeSelection, detailText: nil, selectionHandler: response.selectionHandler),
            createDisclosureCell(
                .userType,
                detailText: response.injectionType.title,
                selectionHandler: response.selectionHandler
            ),
            createDisclosureCell(.units, detailText: nil, selectionHandler: response.selectionHandler),
            createTimePickerCell(
                .carbsDurationTime,
                detail: carbsDuration,
                timePickerValueChanged: response.timePickerValueChangedHandler
            ),
            createTimePickerCell(
                .insulinDurationTime,
                detail: insulinDuration,
                timePickerValueChanged: response.timePickerValueChangedHandler
            )
        ]
        
        return .normal(
            cells: cells,
            header: "settings_root_profile_setup_header".localized,
            footer: nil
        )
    }
    
    func createServicesSection(response: SettingsRoot.Load.Response) -> BaseSettings.Section {
        let cells: [BaseSettings.Cell] = [
            createDisclosureCell(.nightscoutService, detailText: nil, selectionHandler: response.selectionHandler)
        ]
        
        return .normal(
            cells: cells,
            header: "settings_root_services_header".localized,
            footer: nil
        )
    }
    
    func createDebugSection(response: SettingsRoot.Load.Response) -> BaseSettings.Section {
        let cells: [BaseSettings.Cell] = [
            createDisclosureCell(.debugLogs, detailText: nil, selectionHandler: response.selectionHandler)
        ]
        
        return .normal(
            cells: cells,
            header: "settings_root_debug_section_header".localized,
            footer: nil
        )
    }
    
    private func createDisclosureCell(
        _ field: SettingsRoot.Field,
        detailText: String?,
        selectionHandler: @escaping (SettingsRoot.Field) -> Void) -> BaseSettings.Cell {
        return .disclosure(mainText: field.title, detailText: detailText) {
            selectionHandler(field)
        }
    }
    
    private func createTimePickerCell(
        _ field: SettingsRoot.Field,
        detail: TimeInterval,
        timePickerValueChanged: @escaping (SettingsRoot.Field, TimeInterval) -> Void) -> BaseSettings.Cell {
        let hour = Int(detail / TimeInterval.secondsPerHour)
        let minutes = Int((detail - TimeInterval(hour) * TimeInterval.secondsPerHour) / TimeInterval.secondsPerMinute)
        let detail = String(
            format: "%d" + "custom_picker_h".localized + " %02d" + "custom_picker_m".localized,
            hour,
            minutes
        )
        
        let picker = CustomPickerView(mode: .countDown)
        
        picker.selectRow(hour, inComponent: 0, animated: false)
        picker.selectRow(minutes, inComponent: 2, animated: false)
        
        picker.formatValues = { strings in
            guard let hour = TimeInterval(strings[0]), let minutes = TimeInterval(strings[2]) else {
                return ""
            }
            
            let time = hour * TimeInterval.secondsPerHour + minutes * TimeInterval.secondsPerMinute
            timePickerValueChanged(field, time)
            
            let formattedString = String(
                format: "%d" + "custom_picker_h".localized + " %02d" + "custom_picker_m".localized,
                Int(hour),
                Int(minutes)
            )
            return formattedString
        }
        
        return .pickerExpandable(mainText: field.title, detailText: detail, picker: picker)
    }
}

private extension SettingsRoot.Field {
    var title: String {
        switch self {
        case .chartSettings: return "settings_root_chart_title".localized
        case .alert: return "settings_root_alert_title".localized
        case .cloudUpload: return "settings_root_cloud_upload_title".localized
        case .modeSettings: return "settings_root_mode_title".localized
        case .sensor: return "settings_root_sensor_title".localized
        case .transmitter: return "settings_root_transmitter_title".localized
        case .rangeSelection: return "settings_root_range_selection_title".localized
        case .userType: return "settings_root_user_type_title".localized
        case .units: return "settings_root_units_title".localized
        case .carbsDurationTime: return "settings_root_carbs_duration_time_title".localized
        case .insulinDurationTime: return "settings_root_insulin_duration_time_title".localized
        case .nightscoutService: return "settings_root_nightscout_pump_title".localized
        case .debugLogs: return "settings_root_debug_logs_title".localized
        }
    }
}

private extension UserInjectionType {
    var title: String {
        switch self {
        case .pen: return "settings_root_user_type_pen".localized
        case .pump: return "settings_root_user_type_pump".localized
        }
    }
}

private extension UserDeviceMode {
    var title: String {
        switch self {
        case .main: return "settings_root_user_mode_master".localized
        case .follower: return "settings_root_user_mode_follower".localized
        }
    }
}
