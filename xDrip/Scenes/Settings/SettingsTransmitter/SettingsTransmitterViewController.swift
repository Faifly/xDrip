//
//  SettingsTransmitterViewController.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsTransmitterDisplayLogic: AnyObject {
    func displayLoad(viewModel: SettingsTransmitter.Load.ViewModel)
    func displayData(viewModel: SettingsTransmitter.UpdateData.ViewModel)
    func displayStatus(viewModel: SettingsTransmitter.ChangeStatus.ViewModel)
}

class SettingsTransmitterViewController: UIViewController, SettingsTransmitterDisplayLogic {
    var interactor: SettingsTransmitterBusinessLogic?
    var router: SettingsTransmitterDataPassing?
    
    // MARK: Object lifecycle
    
    @available(*, unavailable)
    required init?(coder aDecoder: NSCoder) {
        fatalError("Use regular init")
    }
    
    required init() {
        super.init(nibName: nil, bundle: nil)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SettingsTransmitterInteractor()
        let presenter = SettingsTransmitterPresenter()
        let router = SettingsTransmitterRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.router = router
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: IB
    
    private weak var settingsViewController: BaseSettingsViewController?
    private weak var scanButton: UIButton?
    private weak var statusLabel: UILabel?
    
    @objc private func onScanButtonTap() {
        let request = SettingsTransmitter.BottomAction.Request()
        interactor?.doBottomAction(request: request)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupConstraints()
        doLoad()
    }
    
    // MARK: Do something
    
    private func doLoad() {
        let request = SettingsTransmitter.Load.Request()
        interactor?.doLoad(request: request)
    }
    
    private func setupUI() {
        view.backgroundColor = .tabBarBackgroundColor
        title = "settings_transmitter_screen_title".localized
        
        let settingsViewController = BaseSettingsViewController()
        settingsViewController.view.translatesAutoresizingMaskIntoConstraints = false
        addChild(settingsViewController)
        view.addSubview(settingsViewController.view)
        self.settingsViewController = settingsViewController
        
        let scanButton = UIButton()
        scanButton.translatesAutoresizingMaskIntoConstraints = false
        scanButton.setTitleColor(.white, for: .normal)
        scanButton.addTarget(self, action: #selector(onScanButtonTap), for: .touchUpInside)
        view.addSubview(scanButton)
        self.scanButton = scanButton
        
        let statusLabel = UILabel()
        statusLabel.font = .systemFont(ofSize: 13.0, weight: .regular)
        statusLabel.textColor = .mediumEmphasisText
        statusLabel.translatesAutoresizingMaskIntoConstraints = false
        statusLabel.textAlignment = .center
        view.addSubview(statusLabel)
        self.statusLabel = statusLabel
    }
    
    private func setupConstraints() {
        guard let statusLabel = statusLabel else { return }
        guard let scanButton = scanButton else { return }
        guard let settingsViewController = settingsViewController else { return }
        
        let constraints = [
            statusLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16.0),
            statusLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16.0),
            statusLabel.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -8.0),
            scanButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16.0),
            scanButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16.0),
            scanButton.bottomAnchor.constraint(equalTo: statusLabel.topAnchor, constant: -8.0),
            scanButton.heightAnchor.constraint(equalToConstant: 48.0),
            settingsViewController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            settingsViewController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            settingsViewController.view.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            settingsViewController.view.bottomAnchor.constraint(equalTo: scanButton.topAnchor, constant: -8.0)
        ]
        
        NSLayoutConstraint.activate(constraints)
    }
    
    // MARK: Display
    
    func displayLoad(viewModel: SettingsTransmitter.Load.ViewModel) {        
    }
    
    func displayData(viewModel: SettingsTransmitter.UpdateData.ViewModel) {
        settingsViewController?.update(with: viewModel.viewModel)
    }
    
    func displayStatus(viewModel: SettingsTransmitter.ChangeStatus.ViewModel) {
        scanButton?.setTitle(viewModel.title, for: .normal)
        scanButton?.backgroundColor = viewModel.backgroundColor
        scanButton?.isEnabled = viewModel.isEnabled
        
        statusLabel?.text = viewModel.statusText
    }
}
