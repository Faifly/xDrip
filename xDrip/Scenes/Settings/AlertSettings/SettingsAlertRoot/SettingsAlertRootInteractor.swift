//
//  SettingsAlertRootInteractor.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsAlertRootBusinessLogic {
    func doLoad(request: SettingsAlertRoot.Load.Request)
}

protocol SettingsAlertRootDataStore {
    
}

final class SettingsAlertRootInteractor: SettingsAlertRootBusinessLogic, SettingsAlertRootDataStore {
    var presenter: SettingsAlertRootPresentationLogic?
    var router: SettingsAlertRootRoutingLogic?
    
    // MARK: Do something
    private let settings = User.current.settings.alert
    
    
    func doLoad(request: SettingsAlertRoot.Load.Request) {
        let response = SettingsAlertRoot.Load.Response(
            animated: request.animated,
            sliderValueChangeHandler: handleSliderValueChanged(_:),
            switchValueChangedHandler: handleSwitchValueChanged(_:_:),
            selectionHandler: handleSelection
        )
        
        presenter?.presentLoad(response: response)
    }
    
    private func doUpdate() {
        doLoad(request: SettingsAlertRoot.Load.Request(animated: true))
    }
    
    private func handleSliderValueChanged(_ value: Float) {
        settings?.updateVolume(value)
    }
    
    private func handleSwitchValueChanged(_ field: SettingsAlertRoot.Field, _ value: Bool)  {
        switch field {
        case .overrideSystemVolume: settings?.updateSystemVolumeOverriden(value); doUpdate()
        case .overrideMute: settings?.updateMuteOverriden(value)
        case .notificationsOn: settings?.updateNotificationEnabled(value); doUpdate()
        case .volumeSlider, .alertTypes: break
        }
    }
    
    private func handleSelection() {
        router?.routeToAlertTypes()
    }
}
