//
//  SettingsAlertRootInteractor.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsAlertRootBusinessLogic {
    func doLoad(request: SettingsAlertRoot.Load.Request)
}

protocol SettingsAlertRootDataStore {
    
}

final class SettingsAlertRootInteractor: SettingsAlertRootBusinessLogic, SettingsAlertRootDataStore {
    var presenter: SettingsAlertRootPresentationLogic?
    var router: SettingsAlertRootRoutingLogic?
    
    // MARK: Do something
    
    func doLoad(request: SettingsAlertRoot.Load.Request) {
        let response = createResponse()
        presenter?.presentLoad(response: response)
    }
    
    private func doUpdate() {
        let response = createResponse()
        presenter?.presentUpdate(response: response)
    }
    
    private func createResponse() -> SettingsAlertRoot.Load.Response {
        let settings = User.current.settings.alert
        
        return SettingsAlertRoot.Load.Response(
            sliderValueChangeHandler: { (value) in
                settings?.updateVolume(value)
        }, switchValueChangedHandler: { (field, value) in
            switch field {
            case .overrideSystemVolume: settings?.updateSystemVolumeOverriden(value); self.doUpdate()
            case .overrideMute: settings?.updateMuteOverriden(value)
            case .notificationsOn: settings?.updateNotificationEnabled(value); self.doUpdate()
            default: break
            }
        }, selectionHandler: {
            self.router?.routeToAlertTypes()
        })
    }
}
