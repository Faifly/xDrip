//
//  SettingsModeFollowerInteractor.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsModeFollowerBusinessLogic {
    func doLoad(request: SettingsModeFollower.Load.Request)
    func doLogin(request: SettingsModeFollower.Login.Request)
}

protocol SettingsModeFollowerDataStore: AnyObject {    
}

final class SettingsModeFollowerInteractor: SettingsModeFollowerBusinessLogic, SettingsModeFollowerDataStore {
    var presenter: SettingsModeFollowerPresentationLogic?
    var router: SettingsModeFollowerRoutingLogic?
    
    private let connectionTestWorker: NightscoutConnectionTestWorkerLogic
    private lazy var settingsSubscribers: [NSObjectProtocol] = NotificationCenter.default.subscribe(
        forSettingsChange: [.followerAuthStatus]
    ) { [weak self] in
        self?.updateData()
    }
    
    init() {
        connectionTestWorker = NightscoutConnectionTestWorker()
    }
    
    deinit {
        settingsSubscribers.forEach { NotificationCenter.default.removeObserver($0) }
    }
    
    // MARK: Do something
    
    func doLoad(request: SettingsModeFollower.Load.Request) {
        _ = settingsSubscribers
        let response = SettingsModeFollower.Load.Response()
        presenter?.presentLoad(response: response)
        
        updateData()
    }
    
    func doLogin(request: SettingsModeFollower.Login.Request) {
        guard let settings = User.current.settings.nightscoutSync else { return }
        
        if settings.isFollowerAuthed {
            settings.updateIsFollowerAuthed(false)
            updateData()
        } else {
            router?.showConnectionTestingAlert()
            let tryAuth = !String.isEmpty(settings.apiSecret)
            connectionTestWorker.testNightscoutConnection(tryAuth: tryAuth) { [weak self] success, message, icon in
                self?.router?.finishConnectionTestingAlert(message: message, icon: icon)
                if success {
                    settings.updateIsFollowerAuthed(true)
                    self?.updateData()
                }
            }
        }
    }
    
    private func handleTextEditingChanged(_ field: SettingsModeFollower.Field, _ string: String?) {
        switch field {
        case .nightscoutUrl:
            User.current.settings.nightscoutSync?.updateBaseURL(string)
            
        case .apiSecret:
            User.current.settings.nightscoutSync?.updateAPISecret(string)
            
        default: break
        }
    }
    
    private func updateData() {
        guard let settings = User.current.settings.nightscoutSync else { return }
        
        let response = SettingsModeFollower.Update.Response(
            settings: settings,
            textEditingChangedHandler: handleTextEditingChanged(_:_:),
            timePickerValueChangedHandler: handleTimePickerValueChanged(_:)
        )
        presenter?.presentUpdate(response: response)
    }
    
    private func handleTimePickerValueChanged(_ time: TimeInterval) {
        // TO DO: - add time picker value changed handler logic
    }
}
