//
//  SettingsModeFollowerInteractor.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsModeFollowerBusinessLogic {
    func doLoad(request: SettingsModeFollower.Load.Request)
    func doLogin(request: SettingsModeFollower.Login.Request)
}

protocol SettingsModeFollowerDataStore: AnyObject {    
}

final class SettingsModeFollowerInteractor: SettingsModeFollowerBusinessLogic, SettingsModeFollowerDataStore {
    var presenter: SettingsModeFollowerPresentationLogic?
    var router: SettingsModeFollowerRoutingLogic?
    
    // MARK: Do something
    
    func doLoad(request: SettingsModeFollower.Load.Request) {
        let response = SettingsModeFollower.Load.Response(
            textEditingChangedHandler: handleTextEditingChanged(_:),
            timePickerValueChangedHandler: handleTimePickerValueChanged(_:),
            singleSelectionHandler: handleSingleSelection
        )
        
        presenter?.presentLoad(response: response)
    }
    
    func doLogin(request: SettingsModeFollower.Login.Request) {
    }
    
    private func handleTextEditingChanged(_ string: String?) {
        // TO DO: - add text editing changed handler logic
        
        var enabled = false
        if let str = string {
            enabled = !str.isEmpty
        }
        
        let response = SettingsModeFollower.Update.Response(loginButtonEnabled: enabled)
        presenter?.presentUpdate(response: response)
    }
    
    private func handleTimePickerValueChanged(_ time: TimeInterval) {
        // TO DO: - add time picker value changed handler logic
    }
    
    private func handleSingleSelection() {
        router?.routeToApiSecret()
    }
}
