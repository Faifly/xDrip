//
//  NightscoutCloudBackfillInteractor.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AKUtils

protocol NightscoutCloudBackfillBusinessLogic {
    func doLoad(request: NightscoutCloudBackfill.Load.Request)
    func doSend(request: NightscoutCloudBackfill.Send.Request)
}

protocol NightscoutCloudBackfillDataStore: AnyObject {    
}

final class NightscoutCloudBackfillInteractor: NightscoutCloudBackfillBusinessLogic, NightscoutCloudBackfillDataStore {
    var presenter: NightscoutCloudBackfillPresentationLogic?
    var router: NightscoutCloudBackfillRoutingLogic?
    
    private var date = Date()
    
    // MARK: Do something
    
    func doLoad(request: NightscoutCloudBackfill.Load.Request) {
        let response = NightscoutCloudBackfill.Load.Response(dateChangedHandler: handleDateChanged(_:))
        presenter?.presentLoad(response: response)
    }
    
    func doSend(request: NightscoutCloudBackfill.Send.Request) {
        var allGlucoseReadingsCount = 0
        var allTreatmentsCount = 0
        
        let allGlucoseReadings = GlucoseReading.allMaster.filter({ $0.date >? date &&
            $0.calculatedValue !~ 0.0 &&
            $0.rawValue !~ 0.0}).prefix(500000)
        
        if allGlucoseReadings.isEmpty {
            router?.presentPopUp(message: "settings_nightscout_cloud_backfill_no_glucose_readings_found".localized,
                                 success: false)
            return
        }
        
        allGlucoseReadingsCount = allGlucoseReadings.count
        
        for entry in allGlucoseReadings {
            entry.markAsNotUploaded()
        }
        
        NightscoutService.shared.scanForNotUploadedEntries()
        
        
        let allCarbEntries = CarbEntriesWorker.fetchAllCarbEntries().filter({ $0.date >? date }).prefix(50000)
        let allBolusEntries = InsulinEntriesWorker.fetchAllBolusEntries().filter({ $0.date >? date }).prefix(50000)
        let allBasalEntries = InsulinEntriesWorker.fetchAllBasalEntries().filter({ $0.date >? date }).prefix(50000)
        let allTrainings = TrainingEntriesWorker.fetchAllTrainings().filter({ $0.date >? date }).prefix(50000)
        
        allTreatmentsCount = allCarbEntries.count +
            allBolusEntries.count +
            allBasalEntries.count +
            allTrainings.count
        
        for entry in allCarbEntries {
            entry.markAsNotUploaded()
        }
        for entry in allBolusEntries {
            entry.markAsNotUploaded()
        }
        for entry in allBasalEntries {
            entry.markAsNotUploaded()
        }
        for entry in allTrainings {
            entry.markAsNotUploaded()
        }
        
        NightscoutService.shared.scanForNotUploadedTreatments(respectSettings: false)
        
        
        let message = String(format: "settings_nightscout_cloud_backfill_found_readings_and_treatments".localized,
                             allGlucoseReadingsCount,
                             allTreatmentsCount)
        
        router?.presentPopUp(message: message, success: true)
    }
    
    private func handleDateChanged(_ date: Date) {
        self.date = date
    }
}
