//
//  NightscoutCloudConfigurationPresenter.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NightscoutCloudConfigurationPresentationLogic {
    func presentData(response: NightscoutCloudConfiguration.UpdateData.Response)
}

final class NightscoutCloudConfigurationPresenter: NightscoutCloudConfigurationPresentationLogic {
    weak var viewController: NightscoutCloudConfigurationDisplayLogic?
    
    // MARK: Do something
    
    func presentData(response: NightscoutCloudConfiguration.UpdateData.Response) {
        let tableViewModel = BaseSettings.ViewModel(
            sections: [
                createEnabledSection(response: response),
                createCellularSection(response: response),
                createGlucoseSection(response: response),
                createCredentialsSection(response: response),
                createDownloadSection(response: response),
                createExtraSection(response: response)
            ].compactMap { $0 }
        )
        
        let viewModel = NightscoutCloudConfiguration.UpdateData.ViewModel(tableViewModel: tableViewModel)
        viewController?.displayData(viewModel: viewModel)
    }
    
    private func createEnabledSection(
        response: NightscoutCloudConfiguration.UpdateData.Response
    ) -> BaseSettings.Section {
        let cells: [BaseSettings.Cell] = [
            createRightSwitchCell(
                .enabled,
                isOn: response.settings.isEnabled,
                switchValueChangedHandler: response.switchValueChangedHandler
            )
        ]
        
        return .normal(
            cells: cells,
            header: nil,
            footer: "settings_nightscout_cloud_configuration_enabled_section_footer".localized
        )
    }
    
    private func createCellularSection(
        response: NightscoutCloudConfiguration.UpdateData.Response
    ) -> BaseSettings.Section? {
        guard response.settings.isEnabled else { return nil }
        
        let cells: [BaseSettings.Cell] = [
            createRightSwitchCell(
                .useCellularData,
                isOn: response.settings.useCellularData,
                switchValueChangedHandler: response.switchValueChangedHandler
            )
        ]
        
        return .normal(
            cells: cells,
            header: nil,
            footer: "settings_nightscout_cloud_configuration_use_cellular_data_section_footer".localized
        )
    }
    
    private func createGlucoseSection(
        response: NightscoutCloudConfiguration.UpdateData.Response
    ) -> BaseSettings.Section? {
        guard response.settings.isEnabled else { return nil }
        
        let cells: [BaseSettings.Cell] = [
            createRightSwitchCell(
                .sendDisplayGlucose,
                isOn: response.settings.sendDisplayGlucose,
                switchValueChangedHandler: response.switchValueChangedHandler
            )
        ]
        
        return .normal(
            cells: cells,
            header: nil,
            footer: "settings_nightscout_cloud_configuration_send_display_glucose_section_footer".localized
        )
    }
    
    private func createCredentialsSection(
        response: NightscoutCloudConfiguration.UpdateData.Response
    ) -> BaseSettings.Section? {
        guard response.settings.isEnabled else { return nil }
        if response.settings.isFollowerAuthed {
            return createReadonlyCredentialsSection(response: response)
        } else {
            return createEditableCredentialsSection(response: response)
        }
    }
    
    private func createEditableCredentialsSection(
        response: NightscoutCloudConfiguration.UpdateData.Response
    ) -> BaseSettings.Section {
        let cells: [BaseSettings.Cell] = [
            createTextInputCell(
                .baseURL,
                textFieldText: response.settings.baseURL,
                placeholder: "settings_nightscout_cloud_configuration_base_url_placeholder".localized,
                textEditingChangedHandler: { text in
                    response.textEditingChangedHandler(.baseURL, text)
                }
            ),
            createTextInputCell(
                .apiSecret,
                textFieldText: response.settings.apiSecret,
                placeholder: "settings_nightscout_cloud_configuration_api_secret_placeholder".localized,
                textEditingChangedHandler: { text in
                    response.textEditingChangedHandler(.apiSecret, text)
                }
            ),
            .button(
                title: "settings_nightscout_cloud_configuration_api_test_button".localized,
                color: .customBlue,
                handler: response.testConnectionHandler
            )
        ]
        return .normal(
            cells: cells,
            header: nil,
            footer: "settings_nightscout_cloud_configuration_credentials_section_footer".localized
        )
    }
    
    private func createReadonlyCredentialsSection(
        response: NightscoutCloudConfiguration.UpdateData.Response
    ) -> BaseSettings.Section {
        let cells: [BaseSettings.Cell] = [
            .info(
                mainText: NightscoutCloudConfiguration.Field.baseURL.title,
                detailText: response.settings.baseURL,
                detailTextColor: nil
            ),
            .info(
                mainText: NightscoutCloudConfiguration.Field.apiSecret.title,
                detailText: response.settings.apiSecret,
                detailTextColor: nil
            )
        ]
        return .normal(
            cells: cells,
            header: nil,
            footer: "settings_nightscout_cloud_configuration_credentials_readonly_section_footer".localized
        )
    }
    
    private func createDownloadSection(
        response: NightscoutCloudConfiguration.UpdateData.Response
    ) -> BaseSettings.Section? {
        guard response.settings.isEnabled else { return nil }
        
        let cells: [BaseSettings.Cell] = [
            createRightSwitchCell(
                .downloadData,
                isOn: response.settings.downloadData,
                switchValueChangedHandler: response.switchValueChangedHandler
            )
        ]
        return .normal(
            cells: cells,
            header: nil,
            footer: "settings_nightscout_cloud_configuration_download_data_section_footer".localized
        )
    }
    
    private func createExtraSection(
        response: NightscoutCloudConfiguration.UpdateData.Response
    ) -> BaseSettings.Section? {
        guard response.settings.isEnabled else { return nil }
        
        let cells: [BaseSettings.Cell] = [
            createDisclosureCell(.extraOptions, selectionHandler: response.singleSelectionHandler)
        ]
        return .normal(cells: cells, header: nil, footer: nil)
    }
    
    private func createRightSwitchCell(
        _ field: NightscoutCloudConfiguration.Field,
        isOn: Bool,
        switchValueChangedHandler: @escaping (NightscoutCloudConfiguration.Field, Bool) -> Void) -> BaseSettings.Cell {
        return .rightSwitch(text: field.title, isSwitchOn: isOn, switchHandler: { value in
            switchValueChangedHandler(field, value)
        })
    }
    
    private func createTextInputCell(_ field: NightscoutCloudConfiguration.Field,
                                     textFieldText: String?,
                                     placeholder: String?,
                                     textEditingChangedHandler: @escaping (String?) -> Void) -> BaseSettings.Cell {
        let configurator: ((UITextField) -> Void)?
        switch field {
        case .baseURL:
            configurator = { textField in
                textField.keyboardType = .URL
                textField.autocapitalizationType = .none
                textField.autocorrectionType = .no
                textField.textContentType = .URL
            }
            
        case .apiSecret:
            configurator = { textField in
                textField.keyboardType = .default
                textField.autocapitalizationType = .none
                textField.autocorrectionType = .no
                textField.textContentType = .none
            }
            
        default: configurator = nil
        }
        
        return .textInput(
            mainText: field.title,
            detailText: nil,
            textFieldText: textFieldText,
            placeholder: placeholder,
            textFieldConfigurator: configurator,
            textChangedHandler: { text in
                textEditingChangedHandler(text)
            }
        )
    }
    
    private func createDisclosureCell(
        _ field: NightscoutCloudConfiguration.Field,
        selectionHandler: @escaping () -> Void) -> BaseSettings.Cell {
        return .disclosure(mainText: field.title, detailText: nil, selectionHandler: {
            selectionHandler()
        })
    }
}

private extension NightscoutCloudConfiguration.Field {
    var title: String {
        switch self {
        case .enabled: return "settings_nightscout_cloud_configuration_enabled_title".localized
        case .useCellularData: return "settings_nightscout_cloud_configuration_use_cellular_data_title".localized
        case .sendDisplayGlucose: return "settings_nightscout_cloud_configuration_send_display_glucose_title".localized
        case .baseURL: return "settings_nightscout_cloud_configuration_base_url_title".localized
        case .downloadData: return "settings_nightscout_cloud_configuration_download_data_title".localized
        case .extraOptions: return "settings_nightscout_cloud_configuration_extra_options_title".localized
        case .apiSecret: return "settings_nightscout_cloud_configuration_api_secret_title".localized
        case .testConnection: return "settings_nightscout_cloud_configuration_api_test_button".localized
        }
    }
}
