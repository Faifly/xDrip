//
//  HomeViewController.swift
//  xDrip
//
//  Created by Artem Kalmykov on 11.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AKUtils

protocol HomeDisplayLogic: AnyObject {
    func displayLoad(viewModel: Home.Load.ViewModel)
    func displayGlucoseData(viewModel: Home.GlucoseDataUpdate.ViewModel)
    func displayGlucoseCurrentInfo(viewModel: Home.GlucoseCurrentInfo.ViewModel)
    func displayGlucoseChartTimeFrame(viewModel: Home.ChangeGlucoseEntriesChartTimeFrame.ViewModel)
    func displayBolusData(viewModel: Home.BolusDataUpdate.ViewModel)
    func displayBolusChartTimeFrame(viewModel: Home.ChangeEntriesChartTimeFrame.ViewModel)
    func displayCarbsData(viewModel: Home.CarbsDataUpdate.ViewModel)
    func displayCarbsChartTimeFrame(viewModel: Home.ChangeEntriesChartTimeFrame.ViewModel)
    func displayUpdateSensorState(viewModel: Home.UpdateSensorState.ViewModel)
    func displayUpdateGlucoseDataView(viewModel: Home.GlucoseDataViewUpdate.ViewModel)
}

class HomeViewController: NibViewController, HomeDisplayLogic {
    var interactor: HomeBusinessLogic?
    var router: HomeDataPassing?
    
    // MARK: Object lifecycle
    
    required init() {
        super.init()
        setup()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) {
        fatalError("Use regular .init()")
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.router = router
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: IB
    
    @IBOutlet private weak var glucoseCurrentInfoView: GlucoseCurrentInfoView!
    @IBOutlet private weak var timeLineSegmentView: UISegmentedControl!
    @IBOutlet private weak var glucoseChart: GlucoseHistoryView!
    @IBOutlet private weak var bolusHistoryView: EntriesHistoryView!
    @IBOutlet private weak var carbsHistoryView: EntriesHistoryView!
    @IBOutlet private weak var sensorStateLabel: UILabel!
    @IBOutlet private weak var sensorStateLabelTopConstraint: NSLayoutConstraint!
    @IBOutlet private weak var carbsBolusStackView: UIStackView?
    @IBOutlet private weak var mainStackView: UIStackView?
    @IBOutlet private weak var glucoseDataStackView: UIStackView!
    @IBOutlet private weak var dataView: GlucoseDataView!
    @IBOutlet private weak var optionsView: OptionsView!
    @IBOutlet private weak var optionsTitleLabel: UILabel!
    @IBOutlet private weak var topViewLandscapeWidthConstraint: NSLayoutConstraint!
    @IBOutlet private weak var dataStackView: UIStackView!
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doLoad()
        setupUI()
        subscribeToViewsButtonEvents()
    }
    
    // MARK: Do something
    
    private func doLoad() {
        let request = Home.Load.Request()
        interactor?.doLoad(request: request)
    }
    
    @IBAction private func onTimeFrameSegmentSelected() {
        let hours: Int
        switch timeLineSegmentView.selectedSegmentIndex {
        case 0: hours = 1
        case 1: hours = 3
        case 2: hours = 6
        case 3: hours = 12
        case 4: hours = 24
        default: hours = 0
        }
        
        let request = Home.ChangeEntriesChartTimeFrame.Request(hours: hours)
        interactor?.doChangeGlucoseChartTimeFrame(request: request)
        interactor?.doChangeBolusChartTimeFrame(request: request)
        interactor?.doChangeCarbsChartTimeFrame(request: request)
    }
    
    // MARK: Display
    
    func displayLoad(viewModel: Home.Load.ViewModel) {
        let selectedSegmentIndex: Int
        switch viewModel.hours {
        case 1: selectedSegmentIndex = 0
        case 3: selectedSegmentIndex = 1
        case 6: selectedSegmentIndex = 2
        case 12: selectedSegmentIndex = 3
        case 24: selectedSegmentIndex = 4
        default: selectedSegmentIndex = 0
        }
        
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            self.timeLineSegmentView.selectedSegmentIndex = selectedSegmentIndex
            self.glucoseChart.setLocalTimeFrame(viewModel.timeInterval)
            self.bolusHistoryView.setLocalTimeFrame(viewModel.timeInterval)
            self.carbsHistoryView.setLocalTimeFrame(viewModel.timeInterval)
        }
    }
    
    func displayGlucoseData(viewModel: Home.GlucoseDataUpdate.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            self?.glucoseChart.setup(
                with: viewModel.glucoseValues,
                basalDisplayMode: viewModel.basalDisplayMode,
                strokeChartEntries: viewModel.strokeChartBasalValues,
                unit: viewModel.unit
            )
        }
    }
    
    func displayGlucoseChartTimeFrame(viewModel: Home.ChangeGlucoseEntriesChartTimeFrame.ViewModel) {
        glucoseChart.setLocalTimeFrame(viewModel.timeInterval)
    }
    
    func displayGlucoseCurrentInfo(viewModel: Home.GlucoseCurrentInfo.ViewModel) {
        glucoseCurrentInfoView.setup(with: viewModel)
    }
    
    func displayBolusData(viewModel: Home.BolusDataUpdate.ViewModel) {
        bolusHistoryView.setup(with: viewModel)
    }
    
    func displayBolusChartTimeFrame(viewModel: Home.ChangeEntriesChartTimeFrame.ViewModel) {
        bolusHistoryView.setLocalTimeFrame(viewModel.timeInterval)
    }
    
    func displayCarbsData(viewModel: Home.CarbsDataUpdate.ViewModel) {
        carbsHistoryView.setup(with: viewModel)
    }
    
    func displayCarbsChartTimeFrame(viewModel: Home.ChangeEntriesChartTimeFrame.ViewModel) {
        carbsHistoryView.setLocalTimeFrame(viewModel.timeInterval)
    }
    
    func displayUpdateSensorState(viewModel: Home.UpdateSensorState.ViewModel) {
        DispatchQueue.main.async {
            if viewModel.shouldShow {
                if self.sensorStateLabel.isHidden {
                    self.sensorStateLabel.isHidden = false
                    self.sensorStateLabelTopConstraint.constant = 8.0
                }
                
                self.sensorStateLabel.attributedText = viewModel.text
            } else {
                self.sensorStateLabel.isHidden = true
                self.sensorStateLabel.attributedText = nil
                self.sensorStateLabelTopConstraint.constant = 0.0
            }
        }
    }
    
    func displayUpdateGlucoseDataView(viewModel: Home.GlucoseDataViewUpdate.ViewModel) {
        dataView.setup(with: viewModel.dataSection)
        dataStackView.isHidden = !viewModel.dataSection.isShown
    }
    
    private func setupUI() {
        let titles = [
            "home_time_frame_1h".localized,
            "home_time_frame_3h".localized,
            "home_time_frame_6h".localized,
            "home_time_frame_12h".localized,
            "home_time_frame_24h".localized
        ]
        
        timeLineSegmentView.removeAllSegments()
        titles.forEach {
            timeLineSegmentView.insertSegment(
                withTitle: $0,
                at: timeLineSegmentView.numberOfSegments,
                animated: false
            )
        }
        timeLineSegmentView.selectedSegmentIndex = 0
        optionsTitleLabel.text = "home_options_title".localized.uppercased()
        
        glucoseChart.updateGlucoseDataViewCallback = { [weak self] dateInterval in
            let request = Home.GlucoseDataViewUpdate.Request(dateInterval: dateInterval)
            self?.interactor?.doUpdateGlucoseDataView(request: request)
        }
        
        glucoseChart.onSliderViewOffsetChanged = { [weak self] offset in
            guard let self = self else { return }
            self.carbsHistoryView.onRelativeOffsetChanged(offset)
            self.bolusHistoryView.onRelativeOffsetChanged(offset)
        }
        
        glucoseChart.onSelectionChanged = { [weak self] relativeOffset in
            guard let self = self else { return }
            self.carbsHistoryView.onSelectionChanged(relativeOffset)
            self.bolusHistoryView.onSelectionChanged(relativeOffset)
        }
        
        carbsHistoryView.onSelectionChanged = { [weak self] relativeOffset in
            guard let self = self else { return }
            self.glucoseChart.onSelectionChanged(relativeOffset)
            self.bolusHistoryView.onSelectionChanged(relativeOffset)
        }
        
        bolusHistoryView.onSelectionChanged = { [weak self] relativeOffset in
            guard let self = self else { return }
            self.glucoseChart.onSelectionChanged(relativeOffset)
            self.carbsHistoryView.onSelectionChanged(relativeOffset)
        }
    }
    
    private func subscribeToViewsButtonEvents() {
        bolusHistoryView.onChartButtonClicked = { [weak self] in
            let request = Home.ShowEntriesList.Request(entriesType: .bolus)
            self?.interactor?.doShowEntriesList(request: request)
        }
        
        carbsHistoryView.onChartButtonClicked = { [weak self] in
            let request = Home.ShowEntriesList.Request(entriesType: .carbs)
            self?.interactor?.doShowEntriesList(request: request)
        }
        
        optionsView.itemSelectionHandler = { [weak self] option in
            var entriesType: Root.EntryType
            switch option {
            case .allTrainings:
                entriesType = .training
            case .allBasals:
                entriesType = .basal
            }
            let request = Home.ShowEntriesList.Request(entriesType: entriesType)
            self?.interactor?.doShowEntriesList(request: request)
        }
    }
    
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        guard UIApplication.shared.applicationState != .background else { return }
        if view.bounds.width >= view.bounds.height {
            mainStackView?.axis = .horizontal
            glucoseDataStackView?.isLayoutMarginsRelativeArrangement = true
            glucoseDataStackView?.layoutMargins = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 16)
            glucoseDataStackView?.axis = .vertical
            glucoseDataStackView?.distribution = .fill
            DispatchQueue.main.async {
                self.topViewLandscapeWidthConstraint?.priority = .required
            }
        } else {
            mainStackView?.axis = .vertical
            glucoseDataStackView?.isLayoutMarginsRelativeArrangement = true
            glucoseDataStackView?.layoutMargins = UIEdgeInsets(top: 0, left: 16, bottom: 0, right: 16)
            glucoseDataStackView?.axis = .horizontal
            glucoseDataStackView?.distribution = .fillEqually
            topViewLandscapeWidthConstraint?.priority = .defaultLow
        }
    }
}
