//
//  HomePresenter.swift
//  xDrip
//
//  Created by Artem Kalmykov on 11.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresentationLogic {
    func presentLoad(response: Home.Load.Response)
    func presentGlucoseData(response: Home.GlucoseDataUpdate.Response)
    func presentGlucoseCurrentInfo(response: Home.GlucoseCurrentInfo.Response)
    func presentGlucoseChartTimeFrameChange(response: Home.ChangeEntriesChartTimeFrame.Response)
    func presentBolusData(response: Home.EntriesDataUpdate.Response)
    func presentBolusChartTimeFrameChange(response: Home.ChangeEntriesChartTimeFrame.Response)
    func presentCarbsData(response: Home.EntriesDataUpdate.Response)
    func presentCarbsChartTimeFrameChange(response: Home.ChangeEntriesChartTimeFrame.Response)
}

final class HomePresenter: HomePresentationLogic {
    weak var viewController: HomeDisplayLogic?
    
    private let glucoseFormattingWorker: HomeGlucoseFormattingWorkerProtocol
    
    init() {
        glucoseFormattingWorker = HomeGlucoseFormattingWorker()
    }
    
    // MARK: Do something
    
    func presentLoad(response: Home.Load.Response) {
        let viewModel = Home.Load.ViewModel()
        viewController?.displayLoad(viewModel: viewModel)
    }
    
    func presentGlucoseData(response: Home.GlucoseDataUpdate.Response) {
        let values = glucoseFormattingWorker.formatEntries(response.glucoseData)
        let unit = User.current.settings.unit.label
        let viewModel = Home.GlucoseDataUpdate.ViewModel(glucoseValues: values, unit: unit)
        viewController?.displayGlucoseData(viewModel: viewModel)
    }
    
    func presentGlucoseChartTimeFrameChange(response: Home.ChangeEntriesChartTimeFrame.Response) {
        let viewModel = Home.ChangeEntriesChartTimeFrame.ViewModel(timeInterval: response.timeInterval)
        viewController?.displayGlucoseChartTimeFrame(viewModel: viewModel)
    }
    
    func presentGlucoseCurrentInfo(response: Home.GlucoseCurrentInfo.Response) {
        let value = glucoseFormattingWorker.formatEntry(response.lastGlucoseReading)
        let viewModel = Home.GlucoseCurrentInfo.ViewModel(
            glucoseIntValue: value.glucoseIntValue,
            glucoseDecimalValue: value.glucoseDecimalValue,
            slopeValue: value.slopeValue,
            lastScanDate: value.lastScanDate,
            difValue: value.difValue,
            severityColor: value.severityColor)
        viewController?.displayGlucoseCurrentInfo(viewModel: viewModel)
    }
    
    func presentBolusData(response: Home.EntriesDataUpdate.Response) {
        let values = glucoseFormattingWorker.formatEntries(response.glucoseData)
        let unit = User.current.settings.unit.label
        let viewModel = Home.EntriesDataUpdate.ViewModel(chartTitle: "Active Insulin",
                                                         chartButtonTitle: "14.49 U>",
                                                         entries: values,
                                                         unit: unit,
                                                         color: UIColor.red)
        viewController?.displayBolusData(viewModel: viewModel)
    }
    
    func presentBolusChartTimeFrameChange(response: Home.ChangeEntriesChartTimeFrame.Response) {
        let viewModel = Home.ChangeEntriesChartTimeFrame.ViewModel(timeInterval: response.timeInterval)
        viewController?.displayBolusChartTimeFrame(viewModel: viewModel)
    }
    
    func presentCarbsData(response: Home.EntriesDataUpdate.Response) {
        let values = glucoseFormattingWorker.formatEntries(response.glucoseData)
        let unit = User.current.settings.unit.label
        let viewModel = Home.EntriesDataUpdate.ViewModel(chartTitle: "Active Carbohydrates",
                                                         chartButtonTitle: "40 g>",
                                                         entries: values,
                                                         unit: unit,
                                                         color: UIColor.red)
        viewController?.displayCarbsData(viewModel: viewModel)
    }
    
    func presentCarbsChartTimeFrameChange(response: Home.ChangeEntriesChartTimeFrame.Response) {
        let viewModel = Home.ChangeEntriesChartTimeFrame.ViewModel(timeInterval: response.timeInterval)
        viewController?.displayCarbsChartTimeFrame(viewModel: viewModel)
    }
}
