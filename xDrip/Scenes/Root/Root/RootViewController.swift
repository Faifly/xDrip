//
//  RootViewController.swift
//  xDrip
//
//  Created by Artem Kalmykov on 23.02.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RootDisplayLogic: class {
    func displayLoad(viewModel: Root.Load.ViewModel)
    func displayAddEntry(viewModel: Root.ShowAddEntryOptionsList.ViewModel)
}

class RootViewController: UIViewController, RootDisplayLogic {
    var interactor: RootBusinessLogic?
    var router: (NSObjectProtocol & RootRoutingLogic & RootDataPassing)?
    
    // MARK: Object lifecycle
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = RootInteractor()
        let presenter = RootPresenter()
        let router = RootRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.router = router
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: IB
    @IBOutlet private weak var tabBarContainer: TabBarView!
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doLoad()
    }
    
    // MARK: Do something
    
    private func doLoad() {
        setupUI()
        
        let request = Root.Load.Request()
        interactor?.doLoad(request: request)
    }
    
    private func setupUI() {
        tabBarContainer.itemSelectionHandler = { [weak self] tabButton in
            guard let self = self else { return }
            let request = Root.TabSelection.Request(button: tabButton)
            self.interactor?.doTabSelection(request: request)
        }
    }
    
    // MARK: Display
    
    func displayLoad(viewModel: Root.Load.ViewModel) {
    }
    
    func displayAddEntry(viewModel: Root.ShowAddEntryOptionsList.ViewModel) {
        let alertController = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        
        let action: ((Root.EntryType) -> ()) = { [weak self] entryType in
            guard let self = self else { return }
            let request = Root.ShowAddEntry.Request(type: entryType)
            self.interactor?.doShowAddEntry(request: request)
        }
        
        viewModel.types.forEach { (type) in
            let alertAction = UIAlertAction(title: type.rawValue.localized, style: .default) { _ in
                action(type)
            }
            alertController.addAction(alertAction)
        }
        
        alertController.addAction(UIAlertAction(title: "Cancel".localized, style: .cancel, handler: nil))
        
        
        // for macCatalyst and iPad
        if let popoverController = alertController.popoverPresentationController {
          popoverController.sourceView = self.view
          popoverController.sourceRect = CGRect(x: self.view.bounds.midX, y: self.view.bounds.midY, width: 0, height: 0)
          popoverController.permittedArrowDirections = []
        }
        
        self.present(alertController, animated: true)
    }
}
