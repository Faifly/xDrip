//
//  HistoryRootPresenter.swift
//  xDrip
//
//  Created by Artem Kalmykov on 11.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HistoryRootPresentationLogic {
    func presentLoad(response: HistoryRoot.Load.Response)
    func presentGlucoseData(response: HistoryRoot.GlucoseDataUpdate.Response)
    func presentChartTimeFrameChange(response: HistoryRoot.ChangeEntriesChartTimeFrame.Response)
}

final class HistoryRootPresenter: HistoryRootPresentationLogic {
    weak var viewController: HistoryRootDisplayLogic?
    
    private let glucoseFormattingWorker: HomeGlucoseFormattingWorkerProtocol
    private let homeEntriesFormattingWorker: HomeEntriesFormattingWorkerProtocol
    
    init() {
        glucoseFormattingWorker = HomeGlucoseFormattingWorker()
        homeEntriesFormattingWorker = HomeEntriesFormattingWorker()
    }
    // MARK: Do something
    
    func presentLoad(response: HistoryRoot.Load.Response) {
        let viewModel = HistoryRoot.Load.ViewModel(globalTimeInterval: response.globalTimeInterval)
        viewController?.displayLoad(viewModel: viewModel)
    }
    
    func presentGlucoseData(response: HistoryRoot.GlucoseDataUpdate.Response) {
        let values = glucoseFormattingWorker.formatEntries(response.glucoseData)
        let basal = glucoseFormattingWorker.formatEntries(response.insulinData)
        let stroke = glucoseFormattingWorker.formatEntries(response.chartPointsData)
        let unit = User.current.settings.unit.label
        let dataSection = glucoseFormattingWorker.formatDataSection(response.intervalGlucoseData)
        
        let viewModel = HistoryRoot.GlucoseDataUpdate.ViewModel(
            glucoseValues: values,
            basalDisplayMode: response.basalDisplayMode,
            basalValues: basal,
            strokeChartBasalValues: stroke,
            unit: unit,
            dataSection: dataSection
        )
        viewController?.displayGlucoseData(viewModel: viewModel)
    }
    
    func presentChartTimeFrameChange(response: HistoryRoot.ChangeEntriesChartTimeFrame.Response) {
        let viewModel = HistoryRoot.ChangeEntriesChartTimeFrame.ViewModel(timeInterval: response.timeInterval)
        viewController?.displayChartTimeFrame(viewModel: viewModel)
    }
}
