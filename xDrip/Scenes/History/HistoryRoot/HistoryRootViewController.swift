//
//  HistoryRootViewController.swift
//  xDrip
//
//  Created by Artem Kalmykov on 11.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HistoryRootDisplayLogic: AnyObject {
    func displayLoad(viewModel: HistoryRoot.Load.ViewModel)
    func displayGlucoseData(viewModel: HistoryRoot.GlucoseDataUpdate.ViewModel)
    func displayChartTimeFrameChange(viewModel: HistoryRoot.ChangeEntriesChartTimeFrame.ViewModel)
}

class HistoryRootViewController: NibViewController, HistoryRootDisplayLogic {
    var interactor: HistoryRootBusinessLogic?
    var router: HistoryRootDataPassing?
    
    // MARK: Object lifecycle
    
    @available(*, unavailable)
    required init?(coder aDecoder: NSCoder) {
        fatalError("Use regular init")
    }
    
    required init() {
        super.init()
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = HistoryRootInteractor()
        let presenter = HistoryRootPresenter()
        let router = HistoryRootRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.router = router
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: IB
    
    @IBOutlet private weak var timeLineSegmentView: UISegmentedControl!
    @IBOutlet private weak var glucoseChart: GlucoseHistoryView!
    @IBOutlet private weak var dataView: GlucoseDataView!
    
    @IBOutlet private weak var dateButtonsHeightConstraint: NSLayoutConstraint!
    @IBOutlet private weak var datePickerStackView: UIStackView!
    
    @IBOutlet private weak var minMaxValuesLabel: UILabel!
    @IBOutlet private weak var dateLabel: UILabel!
    @IBOutlet private weak var unitLabel: UILabel!
    
    @IBOutlet private weak var dateButton: UIButton!
    
    private let datePicker = UIDatePicker()
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        doLoad()
    }
    
    // MARK: Do something
    
    private func doLoad() {
        setupNavigationItems()
        
        let request = HistoryRoot.Load.Request()
        interactor?.doLoad(request: request)
    }
    
    @IBAction private func onTimeFrameSegmentSelected() {
        let timeline: HistoryRoot.Timeline
        switch timeLineSegmentView.selectedSegmentIndex {
        case 0: timeline = .last14Days
        case 1: timeline = .date
        default: timeline = .last14Days
        }
        
        let request = HistoryRoot.ChangeEntriesChartTimeFrame.Request(timeline: timeline)
        interactor?.doChangeChartTimeFrame(request: request)
    }
    
    private func setupNavigationItems() {
        navigationItem.leftBarButtonItem = UIBarButtonItem(
            title: "close".localized,
            style: .plain,
            target: self,
            action: #selector(onCancelButtonTap)
        )
    }
    
    @objc private func onCancelButtonTap() {
        let request = HistoryRoot.Cancel.Request()
        interactor?.doCancel(request: request)
    }
    
    // MARK: Display
    
    func displayLoad(viewModel: HistoryRoot.Load.ViewModel) {
        glucoseChart.setGlobalTimeFrame(viewModel.globalTimeInterval)
        glucoseChart.setLocalTimeFrame(.secondsPerDay)
    }
    
    func displayGlucoseData(viewModel: HistoryRoot.GlucoseDataUpdate.ViewModel) {
        if let date = viewModel.date {
            let title = DateFormatter.localizedString(from: date, dateStyle: .short, timeStyle: .none)
            dateButton.setTitle(title, for: .normal)
        }
        
        glucoseChart.globalDate = viewModel.date
        glucoseChart.setup(
            with: viewModel.glucoseValues,
            basalDisplayMode: viewModel.basalDisplayMode,
            basalEntries: viewModel.basalValues,
            strokeChartEntries: viewModel.strokeChartBasalValues,
            unit: viewModel.unit
        )
        dataView.setup(with: viewModel.dataSection)
        unitLabel.text = viewModel.unit
        
        let values = viewModel.glucoseValues.compactMap({ $0.value })
        
        let min = values.min() ?? 0.0
        let max = values.max() ?? 0.0
        minMaxValuesLabel.text = String(format: "%.1f - %.1f", min, max)
        
        if timeLineSegmentView.selectedSegmentIndex == 0 {
            let maxDate = Date()
            let diff = TimeInterval(hours: 14.0 * 24.0)
            let minDate = maxDate.addingTimeInterval(-diff)
            let minString = DateFormatter.localizedString(from: minDate, dateStyle: .short, timeStyle: .none)
            let maxString = DateFormatter.localizedString(from: maxDate, dateStyle: .short, timeStyle: .none)
            
            dateLabel.text = minString + " - " + maxString
        } else {
            dateLabel.text = ""
        }
    }
    
    func displayChartTimeFrameChange(viewModel: HistoryRoot.ChangeEntriesChartTimeFrame.ViewModel) {
        glucoseChart.setGlobalTimeFrame(viewModel.timeInterval)
        
        if viewModel.timeInterval.hours > 24.0 {
            dateButtonsHeightConstraint.constant = 0.0
        } else {
            dateButtonsHeightConstraint.constant = 30.0
        }
    }
    
    private func setupUI() {
        title = "history_scene_title".localized
        
        let titles = [
            "history_scene_timeframe_14_days".localized,
            "history_scene_timeframe_date".localized
        ]
        
        timeLineSegmentView.removeAllSegments()
        titles.forEach {
            timeLineSegmentView.insertSegment(
                withTitle: $0,
                at: timeLineSegmentView.numberOfSegments,
                animated: false
            )
        }
        timeLineSegmentView.selectedSegmentIndex = 0
        glucoseChart.scrollContainer.shouldHandleTouches = false
        glucoseChart.detailsEnabled = false
        
        #if targetEnvironment(macCatalyst)
        if #available(macCatalyst 13.4, *) {
            datePicker.preferredDatePickerStyle = .wheels
        }
        #endif
        
        datePicker.addTarget(self, action: #selector(didPickDate), for: .valueChanged)
        datePicker.maximumDate = Date()
        datePicker.datePickerMode = .date
        
        dateButtonsHeightConstraint.constant = 0.0
        let title = DateFormatter.localizedString(from: Date(), dateStyle: .short, timeStyle: .none)
        dateButton.setTitle(title, for: .normal)
    }
    
    @IBAction private func onDateButtonsTap(_ sender: UIButton) {
        if sender.tag == 0 {
            datePicker.date -= .secondsPerDay
            
            let request = HistoryRoot.ChangeEntriesChartDate.Request(date: datePicker.date)
            interactor?.doChangeChartDate(request: request)
        } else if sender.tag == 2 {
            let nextDate = datePicker.date + .secondsPerDay
            guard nextDate <= Date() else { return }
            datePicker.date = nextDate
            
            let request = HistoryRoot.ChangeEntriesChartDate.Request(date: datePicker.date)
            interactor?.doChangeChartDate(request: request)
        } else if sender.tag == 1 {
            if datePickerStackView.arrangedSubviews.contains(datePicker) {
                datePicker.removeFromSuperview()
            } else {
                datePickerStackView.addArrangedSubview(datePicker)
            }
        }
    }
    
    @objc private func didPickDate() {
        let request = HistoryRoot.ChangeEntriesChartDate.Request(date: datePicker.date)
        interactor?.doChangeChartDate(request: request)
    }
}
