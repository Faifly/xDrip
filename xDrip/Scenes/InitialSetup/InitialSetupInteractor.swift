//
//  InitialSetupInteractor.swift
//  xDrip
//
//  Created by Artem Kalmykov on 28.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol InitialSetupBusinessLogic {
    func doLoad(request: InitialSetup.Load.Request)
    func doBeginSetup(request: InitialSetup.BeginSetup.Request)
    func doSkipSetup(request: InitialSetup.SkipSetup.Request)
    func doSelectDeviceMode(request: InitialSetup.SelectDeviceMode.Request)
    func doSelectInjectionType(request: InitialSetup.SelectInjectionType.Request)
    func doSaveSettings(request: InitialSetup.SaveSettings.Request)
    func doSelectDeviceType(request: InitialSetup.SelectDevice.Request)
    func doCompleteCustomDeviceStep(request: InitialSetup.CompleteCustomDeviceStep.Request)
}

protocol InitialSetupDataStore: AnyObject {
}

final class InitialSetupInteractor: InitialSetupBusinessLogic, InitialSetupDataStore {
    var presenter: InitialSetupPresentationLogic?
    var router: InitialSetupRoutingLogic?
    var stepProvidingWorker: InitialSetupStepProvidingWorker?
    
    // MARK: Do something
    
    func doLoad(request: InitialSetup.Load.Request) {
        let response = InitialSetup.Load.Response()
        presenter?.presentLoad(response: response)
        
        if CGMDevice.current.isSetupInProgress {
            injectDeviceSpecificStepProvider()
            stepProvidingWorker?.initConnectionStep()
        } else {
            stepProvidingWorker = InitialSetupGenericStepWorker()
        }
        
        showNextStep()
    }
    
    func doBeginSetup(request: InitialSetup.BeginSetup.Request) {
        stepProvidingWorker?.completeStep()
        showNextStep()
    }
    
    func doSkipSetup(request: InitialSetup.SkipSetup.Request) {
        User.current.setIsInitialSetupDone(true)
        router?.dismissScene()
    }
    
    func doSelectDeviceMode(request: InitialSetup.SelectDeviceMode.Request) {
        User.current.settings.updateDeviceMode(request.deviceMode)
        stepProvidingWorker?.completeStep()
        showNextStep()
    }
    
    func doSelectInjectionType(request: InitialSetup.SelectInjectionType.Request) {
        User.current.settings.updateInjectionType(request.injectionType)
        stepProvidingWorker?.completeStep()
        showNextStep()
    }
    
    func doSaveSettings(request: InitialSetup.SaveSettings.Request) {
        stepProvidingWorker?.completeStep()
        showNextStep()
    }
    
    func doSelectDeviceType(request: InitialSetup.SelectDevice.Request) {
        CGMDevice.current.updateDeviceType(request.deviceType)
        injectDeviceSpecificStepProvider()
        showNextStep()
    }
    
    func doCompleteCustomDeviceStep(request: InitialSetup.CompleteCustomDeviceStep.Request) {
        if request.moreStepsExpected {
            stepProvidingWorker?.completeStep()
            showNextStep()
        } else {
            User.current.setIsInitialSetupDone(true)
            router?.dismissScene()
        }
    }
    
    // MARK: Logic
    
    private func showNextStep() {
        guard let viewController = stepProvidingWorker?.nextStep?.createViewController() else { return }
        viewController.interactor = self
        router?.showNextScene(viewController)
    }
    
    private func injectDeviceSpecificStepProvider() {
        guard let type = CGMDevice.current.deviceType else { return }
        switch type {
        case .dexcomG6: stepProvidingWorker = InitialSetupG6StepWorker()
        }
    }
}
