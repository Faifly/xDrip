//
//  InitialSetupInteractor.swift
//  xDrip
//
//  Created by Artem Kalmykov on 28.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol InitialSetupBusinessLogic {
    func doLoad(request: InitialSetup.Load.Request)
    func doWarningAgreed(request: InitialSetup.WarningAgreed.Request)
    func doBeginSetup(request: InitialSetup.BeginSetup.Request)
    func doSkipSetup(request: InitialSetup.SkipSetup.Request)
    func doSelectDeviceMode(request: InitialSetup.SelectDeviceMode.Request)
    func doSelectInjectionType(request: InitialSetup.SelectInjectionType.Request)
    func doSaveSettings(request: InitialSetup.SaveSettings.Request)
    func doSelectDeviceType(request: InitialSetup.SelectDevice.Request)
    func doCompleteCustomDeviceStep(request: InitialSetup.CompleteCustomDeviceStep.Request)
    func doSaveNightscoutConnectionData(request: InitialSetup.SaveNightscoutCredentials.Request)
    func doFinishSetup(request: InitialSetup.FinishSetup.Request)
    func doClose()
}

protocol InitialSetupDataStore: AnyObject {
}

final class InitialSetupInteractor: InitialSetupBusinessLogic, InitialSetupDataStore {
    var presenter: InitialSetupPresentationLogic?
    var router: InitialSetupRoutingLogic?
    var stepProvidingWorker: InitialSetupStepProvidingWorker?
    
    // MARK: Do something
    
    func doLoad(request: InitialSetup.Load.Request) {
        let response = InitialSetup.Load.Response()
        presenter?.presentLoad(response: response)
        
        if CGMDevice.current.isSetupInProgress {
            injectDeviceSpecificStepProvider()
            stepProvidingWorker?.initConnectionStep()
        } else {
            stepProvidingWorker = InitialSetupGenericStepWorker()
        }
        
        showNextStep()
    }
    
    func doWarningAgreed(request: InitialSetup.WarningAgreed.Request) {
        User.current.setIsWarningAgreed(true)
        stepProvidingWorker?.completeStep(InitialSetup.GenericStep.warning)
        showNextStep()
    }
    
    func doBeginSetup(request: InitialSetup.BeginSetup.Request) {
        stepProvidingWorker?.completeStep(InitialSetup.GenericStep.intro)
        showNextStep()
    }
    
    func doSkipSetup(request: InitialSetup.SkipSetup.Request) {
        User.current.setIsInitialSetupDone(true)
        router?.dismissScene()
    }
    
    func doSelectDeviceMode(request: InitialSetup.SelectDeviceMode.Request) {
        User.current.settings.updateDeviceMode(request.deviceMode)
        NotificationCenter.default.postSettingsChangeNotification(setting: .deviceMode)
        stepProvidingWorker?.completeStep(InitialSetup.GenericStep.deviceMode)
        showNextStep()
    }
    
    func doSelectInjectionType(request: InitialSetup.SelectInjectionType.Request) {
        User.current.settings.updateInjectionType(request.injectionType)
        NotificationCenter.default.postSettingsChangeNotification(setting: .injectionType)
        stepProvidingWorker?.completeStep(InitialSetup.GenericStep.injectionType)
        showNextStep()
    }
    
    func doSaveSettings(request: InitialSetup.SaveSettings.Request) {
        User.current.settings.updateUnit(request.units)
        User.current.settings.alert?.updateNotificationEnabled(request.alertsEnabled)
        User.current.settings.nightscoutSync?.updateIsEnabled(request.nightscoutEnabled)
        NotificationCenter.default.postSettingsChangeNotification(setting: .unit)
        stepProvidingWorker?.completeStep(InitialSetup.GenericStep.settings)
        showNextStep()
    }
    
    func doSelectDeviceType(request: InitialSetup.SelectDevice.Request) {
        CGMDevice.current.updateDeviceType(request.deviceType)
        injectDeviceSpecificStepProvider()
        showNextStep()
    }
    
    func doCompleteCustomDeviceStep(request: InitialSetup.CompleteCustomDeviceStep.Request) {
        if request.moreStepsExpected {
            stepProvidingWorker?.completeStep(request.step)
            showNextStep()
        } else {
            router?.dismissScene()
        }
    }
    
    func doSaveNightscoutConnectionData(request: InitialSetup.SaveNightscoutCredentials.Request) {
        User.current.settings.nightscoutSync?.updateIsFollowerAuthed(true)
        stepProvidingWorker?.completeStep(InitialSetup.GenericStep.nightscoutSync)
        showNextStep()
    }
    
    func doFinishSetup(request: InitialSetup.FinishSetup.Request) {
        stepProvidingWorker?.completeStep(InitialSetup.GenericStep.finish)
        router?.dismissScene()
    }
    
    func doClose() {
        router?.dismissScene()
    }
    
    // MARK: Logic
    
    private func showNextStep() {
        guard let nextStep = stepProvidingWorker?.nextStep else { return }
        let viewController = nextStep.createViewController()
        viewController.interactor = self
        
        let clearStack = nextStep as? InitialSetup.GenericStep == InitialSetup.GenericStep.intro
        
        router?.showNextScene(viewController, clearStack: clearStack)
    }
    
    private func injectDeviceSpecificStepProvider() {
        guard let type = CGMDevice.current.deviceType else { return }
        switch type {
        case .dexcomG6, .mocked: stepProvidingWorker = InitialSetupG6StepWorker()
        }
    }
}
