//
//  EntriesListInteractor.swift
//  xDrip
//
//  Created by Artem Kalmykov on 17.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EntriesListBusinessLogic {
    func doLoad(request: EntriesList.Load.Request)
    func doCancel(request: EntriesList.Cancel.Request)
    func doDeleteEntry(request: EntriesList.DeleteEntry.Request)
    func doShowSelectedEntry(request: EntriesList.ShowSelectedEntry.Request)
    func inject(persistenceWorker: EntriesListEntryPersistenceWorker)
}

protocol EntriesListDataStore {
    
}

final class EntriesListInteractor: EntriesListBusinessLogic, EntriesListDataStore {
    var presenter: EntriesListPresentationLogic?
    var router: EntriesListRoutingLogic?
    private var entriesWorker: EntriesListEntryPersistenceWorker?
    
    // MARK: Do something
    
    func doLoad(request: EntriesList.Load.Request) {
        let entries = entriesWorker?.fetchEntries() ?? []
        
        let response = EntriesList.Load.Response(entries: entries)
        presenter?.presentLoad(response: response)
    }
    
    func doCancel(request: EntriesList.Cancel.Request) {
        router?.dismissSelf()
    }
    
    func doDeleteEntry(request: EntriesList.DeleteEntry.Request) {
        entriesWorker?.deleteEntry(request.index)
    }
    
    func doShowSelectedEntry(request: EntriesList.ShowSelectedEntry.Request) {
        let entry = entriesWorker?.fetchEntries()[request.index]
        
        // add route to edit entry controller
    }
    
    func inject(persistenceWorker: EntriesListEntryPersistenceWorker) {
        entriesWorker = persistenceWorker
    }
}

protocol EntriesListEntryPersistenceWorker {
    func fetchEntries() -> [AbstractEntry]
    func deleteEntry(_ index: Int)
}

final class EntriesListCarbsPersistenceWorker: EntriesListEntryPersistenceWorker {
    private var carbs: [CarbEntry] = []
    
    func fetchEntries() -> [AbstractEntry] {
        carbs = []
        
        for _ in 0 ... 20 {
            let randValue = Double.random(in: 0...100)
            let randomTimeInterval = TimeInterval.random(in: 0 ... 1_000_000_000)
            let date = Date(timeIntervalSince1970: randomTimeInterval)
            
            let entry = CarbEntry(amount: randValue,
                                  foodType: nil,
                                  assimilationDuration: 0.0,
                                  date: date)
                carbs.append(entry)
        }
        
        return carbs
    }

    func deleteEntry(_ index: Int) {
        let entry = carbs.remove(at: index)
        
        // add delete from database
    }
}

final class EntriesListBolusPersistenceWorker: EntriesListEntryPersistenceWorker {
    private var bolusEntries: [BolusEntry] = []
    
    func fetchEntries() -> [AbstractEntry] {
        bolusEntries = []
        
        for _ in 0 ... 20 {
            let randValue = Double.random(in: 0...100)
            let randomTimeInterval = TimeInterval.random(in: 0 ... 1_000_000_000)
            let date = Date(timeIntervalSince1970: randomTimeInterval)
            
            let entry = BolusEntry(amount: randValue, date: date)
                bolusEntries.append(entry)
        }
        
        return bolusEntries
    }

    func deleteEntry(_ index: Int) {
        let entry = bolusEntries.remove(at: index)
        
        // add delete from database
    }
}
