//
//  EntriesListInteractor.swift
//  xDrip
//
//  Created by Artem Kalmykov on 17.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EntriesListBusinessLogic {
    func doUpdateData(request: EntriesList.UpdateData.Request)
    func doCancel(request: EntriesList.Cancel.Request)
    func doDeleteEntry(request: EntriesList.DeleteEntry.Request)
    func doShowSelectedEntry(request: EntriesList.ShowSelectedEntry.Request)
}

protocol EntriesListDataStore: AnyObject {
    var entry: AbstractEntry? { get set }
}

final class EntriesListInteractor: EntriesListBusinessLogic, EntriesListDataStore {
    var presenter: EntriesListPresentationLogic?
    var router: EntriesListRoutingLogic?
    
    let entriesWorker: EntriesListEntryPersistenceWorker
    var entry: AbstractEntry?
    
    init(persistenceWorker: EntriesListEntryPersistenceWorker) {
        entriesWorker = persistenceWorker
    }
    
    // MARK: Do something
    
    func doUpdateData(request: EntriesList.UpdateData.Request) {
        let entries = entriesWorker.fetchEntries()
        
        let response = EntriesList.UpdateData.Response(entries: entries)
        presenter?.presentUpdateData(response: response)
    }
    
    func doCancel(request: EntriesList.Cancel.Request) {
        router?.dismissScene()
    }
    
    func doDeleteEntry(request: EntriesList.DeleteEntry.Request) {
        entriesWorker.deleteEntry(request.index)
    }
    
    func doShowSelectedEntry(request: EntriesList.ShowSelectedEntry.Request) {
        let entries = entriesWorker.fetchEntries()
        guard entries.count > request.index else { return }
        
        entry = entries[request.index]
        
        router?.routeToEditEntry()
    }
}
