//
//  EntriesListViewController.swift
//  xDrip
//
//  Created by Artem Kalmykov on 17.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EntriesListDisplayLogic: class {
    func displayLoad(viewModel: EntriesList.Load.ViewModel)
}

final class EntriesListSceneBuilder {
    func configSceneForCarbs(for viewController: EntriesListViewController) {
        let persistenceWorker = EntriesListCarbsPersistenceWorker()
        let formattingWorker = EntriesListCarbsFormattingWorker()
        
        viewController.title = "entries_list_scene_title_carbs".localized
        
        guard let interactor = viewController.interactor as? EntriesListInteractor,
        let presenter = interactor.presenter as? EntriesListPresenter else { return }
        
        interactor.inject(persistenceWorker: persistenceWorker)
        presenter.inject(formattingWorker: formattingWorker)
    }
    
    func configSceneForBolus(for viewController: EntriesListViewController) {
        let persistenceWorker = EntriesListBolusPersistenceWorker()
        let formattingWorker = EntriesListBolusFormattingWorker()
        
        viewController.title = "entries_list_scene_title_bolus".localized
        
        guard let interactor = viewController.interactor as? EntriesListInteractor,
        let presenter = interactor.presenter as? EntriesListPresenter else { return }
        
        interactor.inject(persistenceWorker: persistenceWorker)
        presenter.inject(formattingWorker: formattingWorker)
    }
}

class EntriesListViewController: UIViewController, EntriesListDisplayLogic {
    var interactor: EntriesListBusinessLogic?
    var router: (NSObjectProtocol & EntriesListRoutingLogic & EntriesListDataPassing)?
    
    // MARK: Object lifecycle
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = EntriesListInteractor()
        let presenter = EntriesListPresenter()
        let router = EntriesListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.router = router
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: IB
    @IBOutlet private weak var tableView: UITableView!
    private var tableController = EntriesListTableController(data: [])
    
    private var isEdit: Bool = false
    
    private var sectionViewModels: [EntriesList.SectionViewModel] = []
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doLoad()
        
        setupUI()
    }
    
    // MARK: Do something
    
    private func doLoad() {
        let request = EntriesList.Load.Request()
        interactor?.doLoad(request: request)
    }
    
    @IBAction private func onCancelButtonTap() {
        let request = EntriesList.Cancel.Request()
        interactor?.doCancel(request: request)
    }
    
    @objc
    private func onEditButtonTap() {
        isEdit.toggle()
        setupRightBarButtonItem()
        tableView.isEditing = isEdit
    }
    
    // MARK: Display
    
    func displayLoad(viewModel: EntriesList.Load.ViewModel) {
        sectionViewModels = viewModel.items
        
        setupTableView()
    }
    
    private func setupUI() {
        setupRightBarButtonItem()
        
        view.addBlur()
    }
    
    private func setupRightBarButtonItem() {
        let item = UIBarButtonItem(barButtonSystemItem: isEdit ? .done : .edit,
                               target: self,
                               action: #selector(onEditButtonTap))
        
        navigationItem.rightBarButtonItem = item
    }
    
    private func setupTableView() {
        tableController = EntriesListTableController(data: sectionViewModels)
        
        tableView.delegate = tableController
        tableView.dataSource = tableController
        
        tableController.didDeleteEntry = { [weak self] indexPath in
            guard let self = self else { return }
            
            self.sectionViewModels[indexPath.section].items.remove(at: indexPath.row)
            
            let request = EntriesList.DeleteEntry.Request(index: indexPath.row)
            self.interactor?.doDeleteEntry(request: request)
        }
        
        tableController.didSelectEntry = { [weak self] indexPath in
            guard let self = self else { return }
            let request = EntriesList.ShowSelectedEntry.Request(index: indexPath.row)
            self.interactor?.doShowSelectedEntry(request: request)
        }
        
        tableView.reloadData()
    }
}
