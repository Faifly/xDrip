//
//  EditFoodEntryViewController.swift
//  xDrip
//
//  Created by Artem Kalmykov on 17.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditFoodEntryDisplayLogic: AnyObject {
    func displayLoad(viewModel: EditFoodEntry.Load.ViewModel)
}

class EditFoodEntryViewController: BaseSettingsViewController, EditFoodEntryDisplayLogic {
    var interactor: EditFoodEntryBusinessLogic?
    var router: EditFoodEntryDataPassing?
    
    // MARK: Object lifecycle
    
    @available(*, unavailable)
    required init?(coder aDecoder: NSCoder) {
        fatalError("Use regular init")
    }
    
    required init() {
        super.init()
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = EditFoodEntryInteractor()
        let presenter = EditFoodEntryPresenter()
        let router = EditFoodEntryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.router = router
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: IB
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doLoad()
        setupNavigationBar()
    }
    
    // MARK: Do something
    
    private func doLoad() {
        let request = EditFoodEntry.Load.Request()
        interactor?.doLoad(request: request)
    }
    
    @objc private func doCancel() {
        let request = EditFoodEntry.Cancel.Request()
        interactor?.doCancel(request: request)
    }
    
    @objc private func doSave() {
        let request = EditFoodEntry.Save.Request()
        interactor?.doSave(request: request)
    }
    
    private func setupNavigationBar() {
        if let entryType = router?.dataStore?.entryType {
            switch entryType {
            case .food: title = "edit_food_entry_food_scene_title".localized
            case .bolus: title = "edit_food_entry_bolus_scene_title".localized
            case .carbs: title = "edit_food_entry_carbs_scene_title".localized
            }
        }
        
        let cancelButton = UIBarButtonItem(
            barButtonSystemItem: .cancel,
            target: self,
            action: #selector(doCancel)
        )
        navigationItem.leftBarButtonItem = cancelButton
        
        let doneButton = UIBarButtonItem(
            barButtonSystemItem: .done,
            target: self,
            action: #selector(doSave)
        )
        navigationItem.rightBarButtonItem = doneButton
    }
    
    // MARK: Display
    
    func displayLoad(viewModel: EditFoodEntry.Load.ViewModel) {
        update(with: viewModel.tableViewModel)
    }
}
