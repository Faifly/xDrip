//
//  EditFoodEntryPresenter.swift
//  xDrip
//
//  Created by Artem Kalmykov on 17.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditFoodEntryPresentationLogic {
    func presentLoad(response: EditFoodEntry.Load.Response)
}

final class EditFoodEntryPresenter: EditFoodEntryPresentationLogic {
    weak var viewController: EditFoodEntryDisplayLogic?
    
    // MARK: Do something
    
    func presentLoad(response: EditFoodEntry.Load.Response) {
        var sections = [BaseSettings.Section]()
        
        switch response.entryType {
        case .food:
            sections = [
                createCarbsSection(response: response),
                createBolusSection(response: response)
            ]
        case .bolus:
            sections = [
                createBolusSection(response: response)
            ]
        case .basal:
            sections = [
                createBasalSection(response: response)
            ]
        case .carbs:
            sections = [
                createCarbsSection(response: response)
            ]
        case .training:
            sections = [
                createTrainingsSection(response: response)
            ]
        }
        
        let tableViewModel = BaseSettings.ViewModel(sections: sections)
        
        let viewModel = EditFoodEntry.Load.ViewModel(tableViewModel: tableViewModel)
        viewController?.displayLoad(viewModel: viewModel)
    }
    
    private func createCarbsSection(response: EditFoodEntry.Load.Response) -> BaseSettings.Section {
        let carbsValue = response.carbEntry?.amount ?? 0.0
        let valueString = carbsValue ~~ 0.0 ? nil : "\(carbsValue)"
        
        let foodTypes = FoodEmojiDataSource().sections.compactMap { $0.items.first }
        var selectedType = FoodTypeTableViewCell.SelectionState.fast
        let foodType = response.carbEntry?.foodType
        
        if let foodType = foodType {
            if let index = foodTypes.firstIndex(of: foodType) {
                selectedType = FoodTypeTableViewCell.SelectionState(rawValue: index) ?? .fast
            } else {
                selectedType = .custom
            }
        }
        
        let cells: [BaseSettings.Cell] = [
            createTextInputCell(
                .carbsAmount,
                detail: "edit_entry_carbs_amount_unit_grams".localized,
                textFieldText: valueString,
                textChangeHandler: response.textChangedHandler
            ),
            .foodType(
                selectedType: selectedType,
                foodTypeString: foodType,
                foodTypePickedHandler: response.foodTypeChangedHandler
            ),
            createDatePickerCell(
                .carbsDate,
                date: response.carbEntry?.date,
                dateChangedHandler: response.dateChangedHandler
            )
        ]
        
        return .normal(
            cells: cells,
            header: "edit_entry_section_header".localized,
            footer: "edit_entry_carbs_section_footer".localized
        )
    }
    
    private func createBolusSection(response: EditFoodEntry.Load.Response) -> BaseSettings.Section {
        let bolusValue = response.insulinEntry?.amount ?? 0.0
        let valueString = bolusValue ~~ 0.0 ? nil : "\(bolusValue)"
        
        let cells: [BaseSettings.Cell] = [
            createTextInputCell(
                .insulinAmount,
                detail: "edit_entry_insulin_unit_milligrams".localized,
                textFieldText: valueString,
                textChangeHandler: response.textChangedHandler
            ),
            createDatePickerCell(
                .insulinDate,
                date: response.insulinEntry?.date,
                dateChangedHandler: response.dateChangedHandler
            )
        ]
        
        var header: String?
        if response.entryType == .bolus {
            header = "edit_entry_section_header".localized
        }
        
        return .normal(
            cells: cells,
            header: header,
            footer: "edit_entry_bolus_section_footer".localized
        )
    }
    
    private func createBasalSection(response: EditFoodEntry.Load.Response) -> BaseSettings.Section {
        let basalValue = response.insulinEntry?.amount ?? 0.0
        let valueString = basalValue ~~ 0.0 ? nil : "\(basalValue)"
        
        let cells: [BaseSettings.Cell] = [
            createTextInputCell(
                .insulinAmount,
                detail: "edit_entry_insulin_unit_milligrams".localized,
                textFieldText: valueString,
                textChangeHandler: response.textChangedHandler
            ),
            createDatePickerCell(
                .insulinDate,
                date: response.insulinEntry?.date,
                dateChangedHandler: response.dateChangedHandler
            )
        ]
        
        return .normal(
            cells: cells,
            header: "edit_entry_section_header".localized,
            footer: "edit_entry_basal_section_footer".localized
        )
    }
    
    private func createTrainingsSection(response: EditFoodEntry.Load.Response) -> BaseSettings.Section {
        let cells: [BaseSettings.Cell] = [
            createDurationPickerCell(
                duration: response.trainingEntry?.duration,
                durationChangedHandler: response.timeIntervalChangedHandler
            ),
            createIntensityPickerCell(
                intensity: response.trainingEntry?.intensity,
                intensityChangedHandler: response.trainingIntensityChangedHandler
            ),
            createDatePickerCell(
                .trainingDate,
                date: response.trainingEntry?.date,
                dateChangedHandler: response.dateChangedHandler
            )
        ]
        
        return .normal(
            cells: cells,
            header: "edit_entry_trainings_section_title".localized,
            footer: nil
        )
    }
    
    private func createTextInputCell(
        _ field: EditFoodEntry.Field,
        detail: String?,
        textFieldText: String?,
        textChangeHandler: @escaping (EditFoodEntry.Field, String?) -> Void
    ) -> BaseSettings.Cell {
        return .textInput(
            mainText: field.title,
            detailText: detail,
            textFieldText: textFieldText,
            placeholder: "0",
            textFieldConfigurator: { $0.keyboardType = .decimalPad },
            textChangedHandler: { string in
                textChangeHandler(field, string)
        })
    }
    
    private func createDatePickerCell(
        _ field: EditFoodEntry.Field,
        date: Date?,
        dateChangedHandler: @escaping (EditFoodEntry.Field, Date) -> Void
    ) -> BaseSettings.Cell {
        let date = date ?? Date()
        let picker = CustomDatePicker()
        picker.datePickerMode = .dateAndTime
        picker.date = date
        picker.maximumDate = Date()
        
        picker.formatDate = { date in
            dateChangedHandler(field, date)
            
            return DateFormatter.localizedString(from: date, dateStyle: .short, timeStyle: .short)
        }
        
        let detail = DateFormatter.localizedString(from: date, dateStyle: .short, timeStyle: .short)
        return .pickerExpandable(mainText: field.title, detailText: detail, picker: picker)
    }
    
    private func createDurationPickerCell(
        duration: TimeInterval?,
        durationChangedHandler: @escaping (TimeInterval) -> Void
    ) -> BaseSettings.Cell {
        var detail = ""
        let duration = duration ?? TimeInterval.secondsPerMinute
        let picker = CustomPickerView(mode: .countDown)
        
        let hours = Int(duration / TimeInterval.secondsPerHour)
        let mins = Int((duration - Double(hours) * TimeInterval.secondsPerHour) / TimeInterval.secondsPerMinute)
        
        picker.selectRow(hours, inComponent: 0, animated: false)
        picker.selectRow(mins, inComponent: 2, animated: false)
        
        detail = String(format: "%.0f %@", duration / TimeInterval.secondsPerMinute, "edit_entry_trainings_m".localized)
        
        picker.formatValues = { values in
            guard let hour = Double(values[0]), let min = Double(values[2]) else { return "" }
            
            var totalSec = hour * TimeInterval.secondsPerHour + min * TimeInterval.secondsPerMinute
            
            if totalSec < TimeInterval.secondsPerMinute {
                totalSec = TimeInterval.secondsPerMinute
                picker.selectRow(1, inComponent: 2, animated: true)
            }
            
            durationChangedHandler(totalSec)
            
            let totalMins = totalSec / TimeInterval.secondsPerMinute
            
            return String(format: "%.0f %@", totalMins, "edit_entry_trainings_m".localized)
        }
        
        return .pickerExpandable(
            mainText: EditFoodEntry.Field.trainingDuration.title,
            detailText: detail,
            picker: picker
        )
    }
    
    private func createIntensityPickerCell(
        intensity: TrainingIntensity?,
        intensityChangedHandler: @escaping (TrainingIntensity) -> Void
    ) -> BaseSettings.Cell {
        var detail = ""
        let intensity = intensity ?? TrainingIntensity.default
        let data = TrainingIntensity.allCases.map({ $0.localizedTitle })
        
        let picker = CustomPickerView(data: [data])
        
        if let index = data.firstIndex(of: intensity.localizedTitle) {
            detail = intensity.localizedTitle
            picker.selectRow(index, inComponent: 0, animated: false)
        }
        
        picker.formatValues = { values in
            guard let intensityString = values.first else { return "" }
            
            let trainings = TrainingIntensity.allCases
            
            if let intensity = trainings.first(where: { $0.localizedTitle == intensityString }) {
                intensityChangedHandler(intensity)
            }
            return intensityString
        }
        
        return .pickerExpandable(
            mainText: EditFoodEntry.Field.trainingIntensity.title,
            detailText: detail,
            picker: picker
        )
    }
}

private extension EditFoodEntry.Field {
    var title: String {
        switch self {
        case .carbsAmount: return "edit_entry_carbs_amount_title".localized
        case .carbsDate: return "edit_entry_date_and_time".localized
        case .foodType: return "edit_entry_type_of_food".localized
        case .insulinAmount: return "edit_entry_insulin_amount_title".localized
        case .insulinDate: return "edit_entry_date_and_time".localized
        case .trainingDate: return "edit_entry_trainings_cell_dateTime".localized
        case .trainingDuration: return "edit_entry_trainings_cell_duration".localized
        case .trainingIntensity: return "edit_entry_trainings_cell_intensity".localized
        }
    }
}

private extension TrainingIntensity {
    var localizedTitle: String {
        switch self {
        case .low: return "edit_entry_trainings_intensity_low".localized
        case .normal: return "edit_entry_trainings_intensity_normal".localized
        case .high: return "edit_entry_trainings_intensity_high".localized
        }
    }
}
