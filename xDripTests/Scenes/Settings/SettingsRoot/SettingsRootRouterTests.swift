//
//  SettingsRootRouterTests.swift
//  xDrip
//
//  Created by Artem Kalmykov on 11.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import xDrip
import XCTest

// swiftlint:disable implicitly_unwrapped_optional
// swiftlint:disable identifier_name

final class SettingsRootRouterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: SettingsRootRouter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        sut = SettingsRootRouter()
    }
    
    private func createSpy() -> ViewControllerSpy {
        return ViewControllerSpy()
    }
    
    // MARK: Test doubles
    
    final class ViewControllerSpy: SettingsRootViewController {
        var dismissCalled = false
        
        override func dismiss(animated flag: Bool, completion: (() -> Void)? = nil) {
            dismissCalled = true
        }
    }
    
    final class SplitViewControllerSpy: UISplitViewController {
        var lastPresentedViewController: UIViewController?
        
        override func showDetailViewController(_ vc: UIViewController, sender: Any?) {
            lastPresentedViewController = vc
            
            if let navController = vc as? UINavigationController {
                lastPresentedViewController = navController.viewControllers.first
            }
        }
    }
    
    // MARK: Tests
    
    func testDismissSelf() {
        // Given
        let spy = createSpy()
        sut.viewController = spy
        
        // When
        sut.dismissSelf()
        
        // Then
        XCTAssertTrue(spy.dismissCalled)
    }
    
    func testRouteToUnits() {
        // Given
        let spy = SplitViewControllerSpy()
        let root = SettingsRootViewController()
        spy.viewControllers = [root.embedInNavigation(), SettingsChartViewController().embedInNavigation()]
        sut.viewController = root
        
        // When
        sut.routeToUnits()
        // Then
        XCTAssertTrue(spy.lastPresentedViewController is SettingsUnitsViewController)
    }
    
    func testRouteToChartSettings() {
        // Given
        let spy = SplitViewControllerSpy()
        let root = SettingsRootViewController()
        spy.viewControllers = [root.embedInNavigation(), SettingsChartViewController().embedInNavigation()]
        sut.viewController = root
        
        // When
        sut.routeToChartSettings()
        // Then
        XCTAssertTrue(spy.lastPresentedViewController is SettingsChartViewController)
    }
    
    func testRouteAlertRoot() {
        // Given
        let spy = SplitViewControllerSpy()
        let root = SettingsRootViewController()
        spy.viewControllers = [root.embedInNavigation(), SettingsChartViewController().embedInNavigation()]
        sut.viewController = root
        
        // When
        sut.routeToAlertRoot()
        // Then
        XCTAssertTrue(spy.lastPresentedViewController is SettingsAlertRootViewController)
    }
    
    func testRouteToCloudUploads() {
        // Given
        let spy = SplitViewControllerSpy()
        let root = SettingsRootViewController()
        spy.viewControllers = [root.embedInNavigation(), SettingsChartViewController().embedInNavigation()]
        sut.viewController = root
        
        // When
        sut.routeToCloudUploads()
        // Then
        XCTAssertTrue(spy.lastPresentedViewController is SettingsCloudTypesViewController)
    }
    
    func testRouteToTransmitter() {
        // Given
        let spy = SplitViewControllerSpy()
        let root = SettingsRootViewController()
        spy.viewControllers = [root.embedInNavigation(), SettingsChartViewController().embedInNavigation()]
        sut.viewController = root
        
        // When
        sut.routeToTransmitter()
        // Then
        XCTAssertTrue(spy.lastPresentedViewController is SettingsTransmitterViewController)
    }
    
    func testRouteToRangeSelection() {
        // Given
        let spy = SplitViewControllerSpy()
        let root = SettingsRootViewController()
        spy.viewControllers = [root.embedInNavigation(), SettingsChartViewController().embedInNavigation()]
        sut.viewController = root
        
        // When
        sut.routeToRangeSelection()
        // Then
        XCTAssertTrue(spy.lastPresentedViewController is SettingsChartRangesViewController)
    }
    
    func testRouteToModeSettings() {
        // Given
        let spy = SplitViewControllerSpy()
        let root = SettingsRootViewController()
        spy.viewControllers = [root.embedInNavigation(), SettingsChartViewController().embedInNavigation()]
        sut.viewController = root
        
        // When
        sut.routeToModeSettings()
        // Then
        XCTAssertTrue(spy.lastPresentedViewController is SettingsModeRootViewController)
    }
    
    func testRouteToUserType() {
        // Given
        let spy = SplitViewControllerSpy()
        let root = SettingsRootViewController()
        spy.viewControllers = [root.embedInNavigation(), SettingsChartViewController().embedInNavigation()]
        sut.viewController = root
        
        // When
        sut.routeToUserType()
        // Then
        XCTAssertTrue(spy.lastPresentedViewController is SettingsUserTypeRootViewController)
    }
    
    func testRouteToSensor() {
        // Given
        let spy = SplitViewControllerSpy()
        let root = SettingsRootViewController()
        spy.viewControllers = [root.embedInNavigation(), SettingsChartViewController().embedInNavigation()]
        sut.viewController = root
        
        // When
        sut.routeToSensor()
        // Then
        XCTAssertTrue(spy.lastPresentedViewController is SettingsSensorViewController)
    }
}
