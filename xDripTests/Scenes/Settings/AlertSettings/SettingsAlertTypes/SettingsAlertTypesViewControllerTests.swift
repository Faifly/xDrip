//
//  SettingsAlertTypesViewControllerTests.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import xDrip
import XCTest

// swiftlint:disable implicitly_unwrapped_optional

final class SettingsAlertTypesViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: SettingsAlertTypesViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupSettingsAlertTypesViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSettingsAlertTypesViewController() {
        sut = SettingsAlertTypesViewController()
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    final class SettingsAlertTypesBusinessLogicSpy: SettingsAlertTypesBusinessLogic {
        var doLoadCalled = false
        
        func doLoad(request: SettingsAlertTypes.Load.Request) {
            doLoadCalled = true
        }
    }
    
    final class SettingsAlertTypesRoutingLogicSpy: SettingsAlertTypesRoutingLogic {
        var routeToAlertSoundsCalled = false
        var routeToSingleEventCalled = false
        
        func routeToAlertSounds() {
            routeToAlertSoundsCalled = true
        }
        
        func routeToSingleEvent() {
            routeToSingleEventCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldDoLoadWhenViewIsLoaded() {
        // Given
        let spy = SettingsAlertTypesBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.doLoadCalled, "viewDidLoad() should ask the interactor to do load")
    }
    
    func testDisplayLoad() {
        // Given
        let viewModel = SettingsAlertTypes.Load.ViewModel(tableViewModel: BaseSettings.ViewModel(sections: []))
        
        // When
        loadView()
        sut.displayLoad(viewModel: viewModel)
        
        // Then
    }
    
    func testTableView() {
        loadView()
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        XCTAssert(tableView.numberOfSections == 2)
        XCTAssert(tableView.numberOfRows(inSection: 0) == 6)
        XCTAssert(tableView.numberOfRows(inSection: 1) == 8)
    }
    
    func testSwitchValueChangedHandlers() {
        loadView()
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        let cellType = BaseSettingsRightSwitchTableViewCell.self
        let indexPaths = [
            IndexPath(row: 1, section: 0),
            IndexPath(row: 3, section: 0),
            IndexPath(row: 5, section: 0)
        ]
        
        guard let snoozeOnCell = tableView.getCell(of: cellType, at: indexPaths[0]),
            let repeatCell = tableView.getCell(of: cellType, at: indexPaths[1]),
            let vibrateCell = tableView.getCell(of: cellType, at: indexPaths[2]) else {
            XCTFail("Cannot obtain cells")
            return
        }
        
        guard let snoozeSwitch = snoozeOnCell.accessoryView as? UISwitch,
            let repeatSwitch = repeatCell.accessoryView as? UISwitch,
            let vibrateSwitch = vibrateCell.accessoryView as? UISwitch else {
            XCTFail("Cannot obtain switch")
            return
        }
        let settings = User.current.settings.alert?.defaultConfiguration
        
        // When
        snoozeSwitch.isOn = true
        snoozeSwitch.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(settings?.snoozeFromNotification == true)
        
        // When
        snoozeSwitch.isOn = false
        snoozeSwitch.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(settings?.snoozeFromNotification == false)
        
        // When
        repeatSwitch.isOn = true
        repeatSwitch.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(settings?.repeat == true)
        
        // When
        repeatSwitch.isOn = false
        repeatSwitch.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(settings?.snoozeFromNotification == false)
        
        // When
        vibrateSwitch.isOn = true
        vibrateSwitch.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(settings?.isVibrating == true)
        
        // When
        vibrateSwitch.isOn = false
        vibrateSwitch.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(settings?.snoozeFromNotification == false)
    }
    
    func testTimePickerValueChangedHandler() {
        loadView()
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        let cellType = PickerExpandableTableViewCell.self
        let indexPath = IndexPath(row: 2, section: 0)
        
        guard let snoozeCell = tableView.getCell(of: cellType, at: indexPath) else {
            XCTFail("Cannot obtain picker expandable cell")
            return
        }
        
        // When
        snoozeCell.togglePickerVisibility()
        guard let stackView = snoozeCell.contentView.subviews.compactMap({ $0 as? UIStackView }).first,
            let pickerView = stackView.arrangedSubviews.first as? CustomPickerView else {
            XCTFail("Cannot obtain pickerView")
            return
        }
        // When
        pickerView.selectRow(12, inComponent: 2, animated: false)
        pickerView.pickerView(pickerView, didSelectRow: 12, inComponent: 2)
        // Then
        let defaultSnooze = User.current.settings.alert?.defaultConfiguration?.defaultSnooze
        XCTAssertTrue(defaultSnooze == 12.0 * TimeInterval.secondsPerMinute)
    }
    
    func testTextEditingChangedHandler() {
        loadView()
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        let cellType = BaseSettingsTextInputTableViewCell.self
        let indexPath = IndexPath(row: 0, section: 0)
        
        guard let nameCell = tableView.getCell(of: cellType, at: indexPath) else {
            XCTFail("Cannot obtain text input cell")
            return
        }
        
        // Text field editing changed handler
        guard let nameTextField = nameCell.findView(with: "textField") as? UITextField else {
            XCTFail("Cannot obtaion textField")
            return
        }
        // When
        nameTextField.text = "Test Name"
        nameTextField.sendActions(for: .editingChanged)
        // Then
        XCTAssertTrue(User.current.settings.alert?.defaultConfiguration?.name == "Test Name")
    }
    
    func testSingleSelectionHandlers() {
        loadView()
        
        let routerSpy = SettingsAlertTypesRoutingLogicSpy()
        if let interactor = sut.interactor as? SettingsAlertTypesInteractor {
            interactor.router = routerSpy
        }
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        let delegate = tableView.delegate
        
        // Single selection handler test
        // When
        delegate?.tableView?(tableView, didSelectRowAt: IndexPath(row: 4, section: 0))
        // Then
        XCTAssertTrue(routerSpy.routeToAlertSoundsCalled)
        
        // Event type selection handler
        // When
        delegate?.tableView?(tableView, didSelectRowAt: IndexPath(row: 0, section: 1))
        // Then
        XCTAssertTrue(routerSpy.routeToSingleEventCalled)
    }
}
