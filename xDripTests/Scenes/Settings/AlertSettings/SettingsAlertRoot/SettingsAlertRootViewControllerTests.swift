//
//  SettingsAlertRootViewControllerTests.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import xDrip
import XCTest

// swiftlint:disable implicitly_unwrapped_optional

final class SettingsAlertRootViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: SettingsAlertRootViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupSettingsAlertRootViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSettingsAlertRootViewController() {
        sut = SettingsAlertRootViewController()
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    final class SettingsAlertRootBusinessLogicSpy: SettingsAlertRootBusinessLogic {
        var doLoadCalled = false
        
        func doLoad(request: SettingsAlertRoot.Load.Request) {
            doLoadCalled = true
        }
    }
    
    final class SettingsAlertRootRoutingLogicSpy: SettingsAlertRootRoutingLogic {
        var toAlertTypesCalled = false
        
        func routeToAlertTypes() {
            toAlertTypesCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldDoLoadWhenViewIsLoaded() {
        // Given
        let spy = SettingsAlertRootBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.doLoadCalled, "viewDidLoad() should ask the interactor to do load")
    }
    
    func testDisplayLoad() {
        // Given
        let viewModel = SettingsAlertRoot.Load.ViewModel(
            animated: false,
            tableViewModel: BaseSettings.ViewModel(sections: [])
        )
        
        // When
        loadView()
        sut.displayLoad(viewModel: viewModel)
        
        // Then
    }
    
    func testHandlers() {
        loadView()
        
        let settings = User.current.settings.alert
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        // Default
        XCTAssertTrue(tableView.numberOfSections == 1)
        XCTAssertTrue(tableView.numberOfRows(inSection: 0) == 4)
        
        let cellType = BaseSettingsRightSwitchTableViewCell.self
        let indexPaths = [
            IndexPath(row: 0, section: 0),
            IndexPath(row: 1, section: 0),
            IndexPath(row: 2, section: 0)
        ]
        
        guard
            let overrideSystemVolumeCell = tableView.getCell(of: cellType, at: indexPaths[0]),
            let overrideMuteCell = tableView.getCell(of: cellType, at: indexPaths[1]),
            let notificationsOnCell = tableView.getCell(of: cellType, at: indexPaths[2]) else {
            XCTFail("Cannot obtain cell")
            return
        }
        
        guard let volumeSwitch = overrideSystemVolumeCell.accessoryView as? UISwitch,
            let muteSwith = overrideMuteCell.accessoryView as? UISwitch,
            let notificationsSwitch = notificationsOnCell.accessoryView as? UISwitch else {
            XCTFail("Cannot obtain switch")
            return
        }
        
        // Default
        XCTAssertTrue(settings?.isSystemVolumeOverriden == false)
        XCTAssertTrue(settings?.isMuteOverriden == false)
        XCTAssertTrue(settings?.isNotificationsEnabled == true)
        
        // When
        volumeSwitch.isOn = true
        volumeSwitch.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(tableView.numberOfRows(inSection: 0) == 5)
        XCTAssertTrue(settings?.isSystemVolumeOverriden == true)
        
        // When
        muteSwith.isOn = true
        muteSwith.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(settings?.isMuteOverriden == true)
        
        // When
        notificationsSwitch.isOn = true
        notificationsSwitch.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(tableView.numberOfRows(inSection: 0) == 5)
        XCTAssertTrue(settings?.isNotificationsEnabled == true)
    }
    
    func testSingleSelectionHandler() {
        loadView()
        
        let routerSpy = SettingsAlertRootRoutingLogicSpy()
        if let interactor = sut.interactor as? SettingsAlertRootInteractor {
            interactor.router = routerSpy
        }
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        // When
        tableView.callDidSelect(at: IndexPath(row: 4, section: 0))
        // Then
        XCTAssertTrue(routerSpy.toAlertTypesCalled)
    }
    
    func testVolumeSliderHandler() {
        loadView()
        
        let settings = User.current.settings.alert
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        var cellType: UITableViewCell.Type = BaseSettingsRightSwitchTableViewCell.self
        var indexPath = IndexPath(row: 0, section: 0)
        guard
            let overrideSystemVolumeCell = tableView.getCell(of: cellType, at: indexPath) else {
            XCTFail("Cannot obtain cell")
            return
        }
        
        guard let volumeSwitch = overrideSystemVolumeCell.accessoryView as? UISwitch else {
            XCTFail("Cannot obtain switch")
            return
        }
        volumeSwitch.isOn = true
        volumeSwitch.sendActions(for: .valueChanged)
        
        cellType = BaseSettingsVolumeSliderTableViewCell.self
        indexPath = IndexPath(row: 1, section: 0)
        guard
            let volumeSliderCell = tableView.getCell(of: cellType, at: indexPath) else {
            XCTFail("Cannot obtain volume slider cell")
            return
        }
        
        guard let volumeSlider = volumeSliderCell.findView(with: "volumeSlider") as? UISlider else {
            XCTFail("Cannot obtain volume slider")
            return
        }
        
        // When
        volumeSlider.setValue(0.8, animated: false)
        volumeSlider.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(settings?.volume == 0.8)
    }
}
