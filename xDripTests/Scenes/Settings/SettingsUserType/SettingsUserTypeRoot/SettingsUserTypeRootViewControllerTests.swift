//
//  SettingsUserTypeRootViewControllerTests.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import xDrip
import XCTest

// swiftlint:disable implicitly_unwrapped_optional

final class SettingsUserTypeRootViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: SettingsUserTypeRootViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupSettingsUserTypeRootViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSettingsUserTypeRootViewController() {
        sut = SettingsUserTypeRootViewController()
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    final class SettingsUserTypeRootBusinessLogicSpy: SettingsUserTypeRootBusinessLogic {
        var doLoadCalled = false
        var doChangeTypeCalled = false
        
        func doLoad(request: SettingsUserTypeRoot.Load.Request) {
            doLoadCalled = true
        }
        
        func doChangeType(request: SettingsUserTypeRoot.ChangeType.Request) {
            doChangeTypeCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldDoLoadWhenViewIsLoaded() {
        // Given
        let spy = SettingsUserTypeRootBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.doLoadCalled, "viewDidLoad() should ask the interactor to do load")
    }
    
    func testDisplayLoad() {
        // Given
        let viewModel = SettingsUserTypeRoot.Load.ViewModel(injectionType: .pen)
        
        // When
        loadView()
        sut.displayLoad(viewModel: viewModel)
        
        // Then
    }
    
    func testDoChangeTypeShouldCall() {
        let spy = SettingsUserTypeRootBusinessLogicSpy()
        sut.interactor = spy
        loadView()
        
        guard let segmentedControl = sut.view.subviews.compactMap({ $0 as? UISegmentedControl }).first else {
            XCTFail("Cannot obtain segmented control")
            return
        }
        
        // When
        segmentedControl.selectedSegmentIndex = 0
        segmentedControl.sendActions(for: .valueChanged)
        
        XCTAssertTrue(spy.doChangeTypeCalled)
    }
    
    func testTabBar() {
        loadView()
        
        guard let tabBar = sut.children.compactMap({ $0 as? UITabBarController }).first else {
            XCTFail("Cannot obtain tabbar")
            return
        }
        
        XCTAssertTrue(tabBar.viewControllers?.count == 2)
        XCTAssertTrue(tabBar.viewControllers?[0] is  SettingsPenUserViewController)
        XCTAssertTrue(tabBar.viewControllers?[1] is SettingsPumpUserViewController)
        
        guard let segmentedControl = sut.view.subviews.compactMap({ $0 as? UISegmentedControl }).first else {
            XCTFail("Cannot obtain segmented control")
            return
        }
        
        let settings = User.current.settings
        
        XCTAssertTrue(segmentedControl.numberOfSegments == 2)
        
        // When
        segmentedControl.selectedSegmentIndex = 0
        segmentedControl.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(tabBar.selectedIndex == 0)
        XCTAssertTrue(settings?.injectionType == .pen)
        
        // When
        segmentedControl.selectedSegmentIndex = 1
        segmentedControl.sendActions(for: .valueChanged)
        // Then
        XCTAssertTrue(tabBar.selectedIndex == 1)
        XCTAssertTrue(settings?.injectionType == .pump)
    }
}
