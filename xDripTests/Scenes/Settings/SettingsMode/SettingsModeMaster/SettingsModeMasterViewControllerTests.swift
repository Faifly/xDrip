//
//  SettingsModeMasterViewControllerTests.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import xDrip
import XCTest

// swiftlint:disable implicitly_unwrapped_optional

final class SettingsModeMasterViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: SettingsModeMasterViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupSettingsModeMasterViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSettingsModeMasterViewController() {
        sut = SettingsModeMasterViewController()
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    final class SettingsModeMasterBusinessLogicSpy: SettingsModeMasterBusinessLogic {
        var doLoadCalled = false
        
        func doLoad(request: SettingsModeMaster.Load.Request) {
            doLoadCalled = true
        }
    }
    
    final class SettingsModeMasterRoutingLogicSpy: SettingsModeMasterRoutingLogic {
        var routeToSensorCalled = false
        var routeToTransmitterCalled = false
        
        func routeToSensor() {
            routeToSensorCalled = true
        }
        
        func routeToTransmitter() {
            routeToTransmitterCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldDoLoadWhenViewIsLoaded() {
        // Given
        let spy = SettingsModeMasterBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.doLoadCalled, "viewDidLoad() should ask the interactor to do load")
    }
    
    func testDisplayLoad() {
        // Given
        let tableViewModel = BaseSettings.ViewModel(sections: [])
        let viewModel = SettingsModeMaster.Load.ViewModel(tableViewModel: tableViewModel)
        
        // When
        loadView()
        sut.displayLoad(viewModel: viewModel)
        
        // Then
    }
    
    func testTableView() {
        loadView()
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        XCTAssertTrue(tableView.numberOfSections == 1)
        XCTAssertTrue(tableView.numberOfRows(inSection: 0) == 2)
    }
    
    func testSingleSelectionHandler() {
        let spy = SettingsModeMasterRoutingLogicSpy()
        if let interactor = sut.interactor as? SettingsModeMasterInteractor {
            interactor.router = spy
        }
        
        loadView()
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        // When
        tableView.callDidSelect(at: IndexPath(row: 0, section: 0))
        // Then
        XCTAssertTrue(spy.routeToSensorCalled)
        
        // When
        tableView.callDidSelect(at: IndexPath(row: 1, section: 0))
        // Then
        XCTAssertTrue(spy.routeToTransmitterCalled)
    }
}
