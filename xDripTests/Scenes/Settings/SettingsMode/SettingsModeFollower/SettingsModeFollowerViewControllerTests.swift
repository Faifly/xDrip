//
//  SettingsModeFollowerViewControllerTests.swift
//  xDrip
//
//  Created by Artem Kalmykov on 09.04.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import xDrip
import XCTest

// swiftlint:disable implicitly_unwrapped_optional

final class SettingsModeFollowerViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: SettingsModeFollowerViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupSettingsModeFollowerViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSettingsModeFollowerViewController() {
        sut = SettingsModeFollowerViewController()
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    final class SettingsModeFollowerBusinessLogicSpy: SettingsModeFollowerBusinessLogic {
        var doLoadCalled = false
        var doLoginCalled = false
        
        func doLoad(request: SettingsModeFollower.Load.Request) {
            doLoadCalled = true
        }
        
        func doLogin(request: SettingsModeFollower.Login.Request) {
            doLoginCalled = true
        }
    }
    
    final class SettingsModeFollowerRoutingLogicSpy: SettingsModeFollowerRoutingLogic {
        func showConnectionTestingAlert() {
        }
        
        func finishConnectionTestingAlert(message: String, icon: UIImage) {
        }
    }
    
    // MARK: Tests
    
    func testShouldDoLoadWhenViewIsLoaded() {
        // Given
        let spy = SettingsModeFollowerBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.doLoadCalled, "viewDidLoad() should ask the interactor to do load")
    }
    
    func testDisplayUpdate() {
        // Given
        let tableViewModel = BaseSettings.ViewModel(sections: [])
        let viewModel = SettingsModeFollower.Update.ViewModel(tableViewModel: tableViewModel, authButtonMode: .login)
        
        // When
        loadView()
        sut.displayUpdate(viewModel: viewModel)
        
        // Then
    }
    
    func testDoLogin() {
        let containerController = UITabBarController()
        containerController.viewControllers = [sut]
        let navigationController = UINavigationController(rootViewController: containerController)
        let spy = SettingsModeFollowerBusinessLogicSpy()
        sut.interactor = spy
        
        loadView()
        sut.viewWillAppear(false)
        
        guard let loginButton = navigationController.navigationItem.rightBarButtonItem else {
            XCTFail("Cannot obtain loginButton")
            return
        }
        
        // When
        _ = loginButton.target?.perform(loginButton.action, with: nil)
        // Then
        XCTAssertTrue(spy.doLoginCalled)
    }
    
    func testDisplayLogin() {
        let containerController = UITabBarController()
        containerController.viewControllers = [sut]
        let navigationController = UINavigationController(rootViewController: containerController)
        
        loadView()
        sut.viewWillAppear(false)
        
        guard let loginButton = navigationController.navigationItem.rightBarButtonItem else {
            XCTFail("Cannot obtain loginButton")
            return
        }
        
        // When
        _ = loginButton.target?.perform(loginButton.action, with: nil)
        // Then
    }
    
    func testTableView() {
        loadView()
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        XCTAssertTrue(tableView.numberOfSections == 1)
        XCTAssertTrue(tableView.numberOfRows(inSection: 0) == 3)
    }
    
    func testNavigationItem() {
        let containerController = UITabBarController()
        containerController.viewControllers = [sut]
        let navigationController = UINavigationController(rootViewController: containerController)
        loadView()
        
        // When
        sut.viewWillAppear(false)
        // Then
        XCTAssertNotNil(navigationController.navigationItem.rightBarButtonItem)
        
        // When
        sut.viewWillDisappear(false)
        // Then
        XCTAssertNil(navigationController.navigationItem.rightBarButtonItem)
    }
}
