//
//  EditTrainingRouterTests.swift
//  xDrip
//
//  Created by Artem Kalmykov on 17.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import xDrip
import XCTest

// swiftlint:disable implicitly_unwrapped_optional

final class EditTrainingRouterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: EditTrainingRouter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        sut = EditTrainingRouter()
    }
    
    private func createSpy() -> ViewControllerSpy {
        ViewControllerSpy()
    }
    
    override func tearDown() {
        sut = nil
        super.tearDown()
    }
    
    // MARK: Test doubles
    
    final class ViewControllerSpy: EditTrainingViewController {
        var dismissCalled = false
        
        override func dismiss(animated flag: Bool, completion: (() -> Void)? = nil) {
            dismissCalled = true
        }
    }
    
    final class NavigationControllerSpy: UINavigationController {
        var popCalled = false
        
        override func popViewController(animated: Bool) -> UIViewController? {
            popCalled = true
            return nil
        }
    }
    
    // MARK: Tests
    
    func testDismissSceneOnCreateMode() {
        let navSpy = NavigationControllerSpy()
        let spy = ViewControllerSpy()
        navSpy.viewControllers = [spy]
        
        spy.router?.dataStore?.mode = .create
        sut.dataStore = spy.router?.dataStore
        sut.viewController = spy
        
        sut.dismissSelf()
        
        XCTAssertTrue(spy.dismissCalled)
        XCTAssertFalse(navSpy.popCalled)
        
        sut.dataStore = nil
        
        sut.dismissSelf()
        
        XCTAssertTrue(spy.dismissCalled)
        XCTAssertFalse(navSpy.popCalled)
    }
    
    func testDismissSceneOnEditMode() {
        let navSpy = NavigationControllerSpy()
        let spy = ViewControllerSpy()
        navSpy.viewControllers = [spy]
        let trainingEntry = TrainingEntry(duration: 0.0, intensity: .default, date: Date())
        
        spy.router?.dataStore?.mode = .edit(trainingEntry)
        sut.dataStore = spy.router?.dataStore
        sut.viewController = spy
        
        sut.dismissSelf()
        
        XCTAssertFalse(spy.dismissCalled)
        XCTAssertTrue(navSpy.popCalled)
    }
}
