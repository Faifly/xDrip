//
//  EditCalibrationViewControllerTests.swift
//  xDrip
//
//  Created by Artem Kalmykov on 17.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import xDrip
import XCTest

// swiftlint:disable implicitly_unwrapped_optional

final class EditCalibrationViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: EditCalibrationViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupEditCalibrationViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupEditCalibrationViewController() {
        sut = EditCalibrationViewController()
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    final class EditCalibrationBusinessLogicSpy: EditCalibrationBusinessLogic {
        var doUpdateDataCalled = false
        var doSaveCalled = false
        var doDismissCalled = false
        
        func doUpdateData(request: EditCalibration.UpdateData.Request) {
            doUpdateDataCalled = true
        }
        
        func doSave(request: EditCalibration.Save.Request) {
            doSaveCalled = true
        }
        
        func doDismiss(request: EditCalibration.Dismiss.Request) {
            doDismissCalled = true
        }
    }
    
    final class EditCalibrationRoutingLogicSpy: EditCalibrationRoutingLogic {
        var dismissCalled = false
        var showErrorCalled = false
        var showSuccessCalled = false
        
        func dismissScene() {
            dismissCalled = true
        }
        
        func showError(_ error: String) {
            showErrorCalled = true
        }
        
        func showSuccessAndDismiss() {
            showSuccessCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldDoLoadWhenViewIsLoaded() {
        // Given
        let spy = EditCalibrationBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.doUpdateDataCalled, "viewDidLoad() should ask the interactor to do load")
    }
    
    func testDisplayLoad() {
        // Given
        let tableViewModel = BaseSettings.ViewModel(sections: [])
        let viewModel = EditCalibration.UpdateData.ViewModel(tableViewModel: tableViewModel)
        
        // When
        loadView()
        sut.displayUpdateData(viewModel: viewModel)
        
        // Then
    }
    
    func testDoDismiss() {
        // Given
        let spy = EditCalibrationBusinessLogicSpy()
        sut.interactor = spy
        loadView()
        
        guard let cancelButton = sut.navigationItem.leftBarButtonItem else {
            XCTFail("Cannot obtain cancel button")
            return
        }
        // When
        _ = cancelButton.target?.perform(cancelButton.action, with: nil)
        // Then
        XCTAssertTrue(spy.doDismissCalled)
    }
    
    func testDoSave() {
        // Given
        let spy = EditCalibrationBusinessLogicSpy()
        sut.interactor = spy
        loadView()
        
        guard let saveButton = sut.navigationItem.rightBarButtonItem else {
            XCTFail("Cannot obtain cancel button")
            return
        }
        // When
        _ = saveButton.target?.perform(saveButton.action, with: nil)
        // Then
        XCTAssertTrue(spy.doSaveCalled)
    }
    
    func testRouterDismissScene() {
        let spy = EditCalibrationRoutingLogicSpy()
        if let interactor = sut.interactor as? EditCalibrationInteractor {
            interactor.router = spy
        }
        
        loadView()
        
        guard let cancelButton = sut.navigationItem.leftBarButtonItem else {
            XCTFail("Cannot obtain cancel button")
            return
        }
        // When
        _ = cancelButton.target?.perform(cancelButton.action, with: nil)
        // Then
        XCTAssertTrue(spy.dismissCalled)
    }
    
    func testRouterShowError() {
        let spy = EditCalibrationRoutingLogicSpy()
        if let interactor = sut.interactor as? EditCalibrationInteractor {
            interactor.router = spy
        }
        
        loadView()
        
        guard let saveButton = sut.navigationItem.rightBarButtonItem else {
            XCTFail("Cannot obtain cancel button")
            return
        }
        // When
        _ = saveButton.target?.perform(saveButton.action, with: nil)
        // Then
        XCTAssertTrue(spy.showErrorCalled)
    }
    
    func testTableView() {
        var date = Date().addingTimeInterval(-86400)
        
        User.current.settings.updateUnit(.mmolL)
        CGMController.shared.setupService(for: .dexcomG6)
        CGMDevice.current.sensorStartDate = date
        CGMDevice.current.updateSensorIsStarted(true)
        date = date.addingTimeInterval(3600)
        GlucoseReading.create(filtered: 1.0, unfiltered: 1.0, rssi: 0.0, date: date)
        date = date.addingTimeInterval(3600)
        GlucoseReading.create(filtered: 1.0, unfiltered: 1.0, rssi: 0.0, date: date)
        
        let spy = EditCalibrationRoutingLogicSpy()
        if let interactor = sut.interactor as? EditCalibrationInteractor {
            interactor.router = spy
        }
        
        loadView()
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        XCTAssertTrue(tableView.numberOfSections == 1)
        XCTAssertTrue(tableView.numberOfRows(inSection: 0) == 2)
        
        guard let firstValuePicker = getPicker(tableView, at: IndexPath(row: 0, section: 0)) as? CustomPickerView,
            let firstDatePicker = getPicker(tableView, at: IndexPath(row: 1, section: 0)) as? CustomDatePicker else {
            XCTFail("Cannot obtain first section cells")
            return
        }
        
        firstDatePicker.date = date.addingTimeInterval(3600)
        firstDatePicker.sendActions(for: .valueChanged)
        
        firstValuePicker.selectRow(10, inComponent: 0, animated: false)
        firstValuePicker.pickerView(firstValuePicker, didSelectRow: 10, inComponent: 0)
        
        let saveButton = sut.navigationItem.rightBarButtonItem
        
        _ = saveButton?.target?.perform(saveButton?.action, with: nil)
        XCTAssertTrue(spy.showSuccessCalled)
    }
    
    func testTableViewWithInitialCalibrations() {
        let date = Date().addingTimeInterval(-86400)
        User.current.settings.updateUnit(.mgDl)
        CGMController.shared.setupService(for: .dexcomG6)
        CGMDevice.current.sensorStartDate = date
        CGMDevice.current.updateSensorIsStarted(true)
        
        try? Calibration.createInitialCalibration(
            glucoseLevel1: 10.0,
            glucoseLevel2: 10.0,
            date1: date.addingTimeInterval(3600),
            date2: date.addingTimeInterval(7200)
        )
        
        loadView()
        
        guard let tableView = sut.view.subviews.compactMap({ $0 as? UITableView }).first else {
            XCTFail("Cannot obtain tableView")
            return
        }
        
        XCTAssertTrue(tableView.numberOfSections == 1)
        XCTAssertTrue(tableView.numberOfRows(inSection: 0) == 2)
    }
    
    private func getPicker(_ tableView: UITableView, at indexPath: IndexPath) -> PickerView? {
        let cellType = PickerExpandableTableViewCell.self
        guard let pickerCell = tableView.getCell(of: cellType, at: indexPath) else {
            XCTFail("Cannot obtain picker cell")
            return nil
        }
        
        pickerCell.togglePickerVisibility()
        
        guard let stackView = pickerCell.contentView.subviews.compactMap({ $0 as? UIStackView }).first,
            let picker = stackView.arrangedSubviews.first as? PickerView else {
            XCTFail("Cannot obtain picker")
            return nil
        }
        
        return picker
    }
}
