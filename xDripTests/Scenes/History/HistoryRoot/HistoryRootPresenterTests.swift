//
//  HistoryRootPresenterTests.swift
//  xDrip
//
//  Created by Artem Kalmykov on 11.03.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import xDrip
import XCTest

// swiftlint:disable implicitly_unwrapped_optional

final class HistoryRootPresenterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: HistoryRootPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupHistoryRootPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupHistoryRootPresenter() {
        sut = HistoryRootPresenter()
    }
    
    // MARK: Test doubles
    
    final class HistoryRootDisplayLogicSpy: HistoryRootDisplayLogic {
        var displayLoadCalled = false
        var displayGlucoseDataCalled = false
        var displayChartTimeFrameCalled = false
        
        func displayLoad(viewModel: HistoryRoot.Load.ViewModel) {
            displayLoadCalled = true
        }
        
        func displayGlucoseData(viewModel: HistoryRoot.GlucoseDataUpdate.ViewModel) {
            displayGlucoseDataCalled = true
        }
        
        func displayChartTimeFrameChange(viewModel: HistoryRoot.ChangeEntriesChartTimeFrame.ViewModel) {
            displayChartTimeFrameCalled = true
        }
    }
    
    // MARK: Tests
    
    func testPresentLoad() {
        // Given
        let spy = HistoryRootDisplayLogicSpy()
        sut.viewController = spy
        let response = HistoryRoot.Load.Response(globalTimeInterval: .zero)
        
        // When
        sut.presentLoad(response: response)
        
        // Then
        XCTAssertTrue(
            spy.displayLoadCalled,
            "presentLoad(response:) should ask the view controller to display the result"
        )
    }
    
    func testPresentChangeChartTimeFrame() {
        let spy = HistoryRootDisplayLogicSpy()
        sut.viewController = spy
        
        let response = HistoryRoot.GlucoseDataUpdate.Response(
            glucoseData: [],
            intervalGlucoseData: [],
            basalDisplayMode: .notShown,
            basalData: [],
            date: nil
        )
        
        // When
        sut.presentGlucoseData(response: response)
        // Then
        XCTAssertTrue(spy.displayGlucoseDataCalled)
    }
    
    func testPresentChartTimeFrameChange() {
        let spy = HistoryRootDisplayLogicSpy()
        sut.viewController = spy
        
        let response = HistoryRoot.ChangeEntriesChartTimeFrame.Response(timeInterval: .secondsPerDay)
        // When
        sut.presentChartTimeFrameChange(response: response)
        // Then
        XCTAssertTrue(spy.displayChartTimeFrameCalled)
    }
}
