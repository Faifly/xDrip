//
//  RootViewControllerTests.swift
//  xDrip
//
//  Created by Artem Kalmykov on 23.02.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import xDrip
import XCTest
import AKUtils

// swiftlint:disable implicitly_unwrapped_optional

final class RootViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: RootViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupRootViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupRootViewController() {
        sut = RootViewController()
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    final class RootBusinessLogicSpy: RootBusinessLogic {
        var doLoadCalled = false
        var lastTabBarButtonSelected: Root.TabButton?
        var selectedEntryType: Root.EntryType?
        
        let entries: [Root.EntryType] = [.food, .bolus, .carbs, .training]
        
        func doLoad(request: Root.Load.Request) {
            doLoadCalled = true
        }
        
        func doTabSelection(request: Root.TabSelection.Request) {
            lastTabBarButtonSelected = request.button
        }
        
        func doShowAddEntry(request: Root.ShowAddEntry.Request) {
            let type = entries[request.index]
            selectedEntryType = type
        }
        
        func doShowInitialSetupIfNeeded(request: Root.InitialSetup.Request) {
        }
    }
    
    // MARK: Tests
    
    func testShouldDoLoadWhenViewIsLoaded() {
        // Given
        let spy = RootBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.doLoadCalled, "viewDidLoad() should ask the interactor to do load")
    }
    
    func testDisplayLoad() {
        // Given
        let viewModel = Root.Load.ViewModel()
        
        // When
        loadView()
        sut.displayLoad(viewModel: viewModel)
        
        // Then
    }
    
    func testTabBarViewCallbacks() {
        // Given
        let spy = RootBusinessLogicSpy()
        sut.interactor = spy
        loadView()
        
        guard let tabBarView = sut.value(forKey: "tabBarContainer") as? TabBarView else {
            XCTFail("Couldn't obtain tabBarContainer")
            return
        }
        guard let stackView = tabBarView.subviews.first as? UIStackView else {
            XCTFail("Couldn't obtain stack view")
            return
        }
        guard stackView.arrangedSubviews.count == 5 else {
            XCTFail("Expected button count: 5, found: \(stackView.arrangedSubviews.count)")
            return
        }
        guard let calibrationButton = stackView.arrangedSubviews[0] as? UIButton else {
            XCTFail("Couldn't cast calibration button to UIButton")
            return
        }
        guard let chartButton = stackView.arrangedSubviews[1] as? UIButton else {
            XCTFail("Couldn't cast chart button to UIButton")
            return
        }
        guard let plusButton = stackView.arrangedSubviews[2] as? UIButton else {
            XCTFail("Couldn't cast plus button to UIButton")
            return
        }
        guard let historyButton = stackView.arrangedSubviews[3] as? UIButton else {
            XCTFail("Couldn't cast history button to UIButton")
            return
        }
        guard let settingsButton = stackView.arrangedSubviews[4] as? UIButton else {
            XCTFail("Couldn't cast settings button to UIButton")
            return
        }
        
        // When
        calibrationButton.sendActions(for: .touchUpInside)
        // Then
        XCTAssertTrue(spy.lastTabBarButtonSelected == .calibration)
        
        // When
        chartButton.sendActions(for: .touchUpInside)
        // Then
        XCTAssertTrue(spy.lastTabBarButtonSelected == .chart)
        
        // When
        plusButton.sendActions(for: .touchUpInside)
        // Then
        XCTAssertTrue(spy.lastTabBarButtonSelected == .plus)
        
        // When
        historyButton.sendActions(for: .touchUpInside)
        // Then
        XCTAssertTrue(spy.lastTabBarButtonSelected == .history)
        
        // When
        settingsButton.sendActions(for: .touchUpInside)
        // Then
        XCTAssertTrue(spy.lastTabBarButtonSelected == .settings)
    }
    
    func testShowAddEntry() {
        // Given
        let spy = RootBusinessLogicSpy()
        sut.interactor = spy
        loadView()
        
        var titles: [String] = []
        for index in spy.entries.indices {
            titles.append(String(index))
        }
        
        let viewModel = Root.ShowAddEntryOptionsList.ViewModel(titles: titles)
        sut.displayAddEntry(viewModel: viewModel)
        
        guard let alertController = sut.presentedViewController as? UIAlertController else {
            XCTFail("Couldn't obtain alert controller")
            return
        }
        
        guard alertController.actions.count == titles.count + 1 else {
            XCTFail(
                "Expected actions count: \(titles.count), found: \(alertController.actions.count)"
            ) // +1 because of cancel action
            return
        }
        
        for index in 0 ..< alertController.actions.count - 1 {
            let action = alertController.actions[index]
            
            XCTAssertTrue(action.title == titles[index])
            
            // When
            alertController.sendAction(action: action)
            // Then
            XCTAssertTrue(spy.selectedEntryType == spy.entries[index])
        }
    }
    
    func testHomeViewController() {
        // When
        loadView()
        
        // Then
        XCTAssert(sut.presentingViewController == nil)
        XCTAssert(sut.children.count == 1)
        XCTAssert(sut.children[0] is HomeViewController)
        
        guard let container = sut.value(forKey: "homeContainerView") as? UIView else {
            XCTFail("Cannot obtain homeContainerView")
            return
        }
        
        XCTAssert(sut.children[0].view.superview == container)
    }
}

extension UIAlertController {
    typealias AlertHandler = @convention(block) (UIAlertAction) -> Void

    func sendAction(action: UIAlertAction) {
        guard let block = action.value(forKey: "handler") else { return }
        let handler = unsafeBitCast(block as AnyObject, to: AlertHandler.self)
        handler(action)
    }
}
