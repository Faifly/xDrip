//
//  RootViewControllerTests.swift
//  xDrip
//
//  Created by Artem Kalmykov on 23.02.2020.
//  Copyright (c) 2020 Faifly. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import xDrip
import XCTest
import AKUtils

final class RootViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: RootViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupRootViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupRootViewController() {
        sut = UIStoryboard(board: .root).instantiate(RootViewController.self)
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    final class RootBusinessLogicSpy: RootBusinessLogic {
        var doLoadCalled = false
        var lastTabBarButtonSelected: Root.TabButton?
        
        func doLoad(request: Root.Load.Request) {
            doLoadCalled = true
        }
        
        func doTabSelection(request: Root.TabSelection.Request) {
            lastTabBarButtonSelected = request.button
        }
        
        func doShowAddEntry(request: Root.ShowAddEntry.Request) {
        }
    }
    
    // MARK: Tests
    
    func testShouldDoLoadWhenViewIsLoaded() {
        // Given
        let spy = RootBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.doLoadCalled, "viewDidLoad() should ask the interactor to do load")
    }
    
    func testDisplayLoad() {
        // Given
        let viewModel = Root.Load.ViewModel()
        
        // When
        loadView()
        sut.displayLoad(viewModel: viewModel)
        
        // Then
    }
    
    func testTabBarViewCallbacks() {
        // Given
        let spy = RootBusinessLogicSpy()
        sut.interactor = spy
        loadView()
        
        guard let tabBarView = sut.value(forKey: "tabBarContainer") as? TabBarView else {
            XCTFail("Couldn't obtain tabBarContainer")
            return
        }
        guard let stackView = tabBarView.subviews.first as? UIStackView else {
            XCTFail("Couldn't obtain stack view")
            return
        }
        guard stackView.arrangedSubviews.count == 5 else {
            XCTFail("Expected button count: 5, found: \(stackView.arrangedSubviews.count)")
            return
        }
        guard let calibrationButton = stackView.arrangedSubviews[0] as? UIButton else {
            XCTFail("Couldn't cast calibration button to UIButton")
            return
        }
        guard let chartButton = stackView.arrangedSubviews[1] as? UIButton else {
            XCTFail("Couldn't cast chart button to UIButton")
            return
        }
        guard let plusButton = stackView.arrangedSubviews[2] as? UIButton else {
            XCTFail("Couldn't cast plus button to UIButton")
            return
        }
        guard let historyButton = stackView.arrangedSubviews[3] as? UIButton else {
            XCTFail("Couldn't cast history button to UIButton")
            return
        }
        guard let settingsButton = stackView.arrangedSubviews[4] as? UIButton else {
            XCTFail("Couldn't cast settings button to UIButton")
            return
        }
        
        // When
        calibrationButton.sendActions(for: .touchUpInside)
        // Then
        XCTAssertTrue(spy.lastTabBarButtonSelected == .calibration)
        
        // When
        chartButton.sendActions(for: .touchUpInside)
        // Then
        XCTAssertTrue(spy.lastTabBarButtonSelected == .chart)
        
        // When
        plusButton.sendActions(for: .touchUpInside)
        // Then
        XCTAssertTrue(spy.lastTabBarButtonSelected == .plus)
        
        // When
        historyButton.sendActions(for: .touchUpInside)
        // Then
        XCTAssertTrue(spy.lastTabBarButtonSelected == .history)
        
        // When
        settingsButton.sendActions(for: .touchUpInside)
        // Then
        XCTAssertTrue(spy.lastTabBarButtonSelected == .settings)
    }
}
